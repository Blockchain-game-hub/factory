{
  "language": "Solidity",
  "sources": {
    "contracts/BaseFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./libraries/LibAppStorage.sol\";\n\nabstract contract BaseFacet {\n\n  AppStorage internal s;\n\n}\n"
    },
    "contracts/libraries/LibAppStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\n//\n\nstruct AppStorage {\n  // ERC1155\n  // Mapping from token ID to account balances\n  mapping (uint256 => mapping(address => uint256)) _balances;\n  // Mapping from account to operator approvals\n  mapping (address => mapping(address => bool)) _operatorApprovals;\n  // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n  string _uri;\n\n  // ERC1155URIStorage\n  mapping (uint256 => string) _tokenURIs;\n\n  // OnCyberScenesFacet\n  address manager;\n  address opensea;\n  Counters.Counter totalSupply;\n  mapping (address => Counters.Counter) minterNonce;\n\n\n  // BaseRelayRecipient\n  /*\n   * Forwarder singleton we accept calls from\n   */\n  address trustedForwarder;\n\n}\n\nlibrary LibAppStorage {\n  bytes32 constant APP_STORAGE_POSITION = keccak256(\"diamond.standard.app.storage\");\n\n  function diamondStorage() internal pure returns (AppStorage storage ds) {\n    bytes32 position = APP_STORAGE_POSITION;\n    assembly {\n      ds.slot := position\n    }\n  }\n\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n}\n"
    },
    "contracts/openzepplin/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Diamond.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./IERC1155MetadataURI.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"../libraries/LibAppStorage.sol\";\nimport \"../BaseFacet.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is BaseFacet, Context, IERC1155Diamond, IERC1155MetadataURI {\n  using Address for address;\n\n  /**\n   * @dev See {IERC1155MetadataURI-uri}.\n   *\n   * This implementation returns the same URI for *all* token types. It relies\n   * on the token type ID substitution mechanism\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n   *\n   * Clients calling this function must replace the `\\{id\\}` substring with the\n   * actual token type ID.\n   */\n  function uri(uint256) public view virtual override returns (string memory) {\n    return s._uri;\n  }\n\n  /**\n   * @dev See {IERC1155-balanceOf}.\n   *\n   * Requirements:\n   *\n   * - `account` cannot be the zero address.\n   */\n  function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n    require(account != address(0), \"ERC1155: balance query for the zero address\");\n    return s._balances[id][account];\n  }\n\n  /**\n   * @dev See {IERC1155-balanceOfBatch}.\n   *\n   * Requirements:\n   *\n   * - `accounts` and `ids` must have the same length.\n   */\n  function balanceOfBatch(\n    address[] memory accounts,\n    uint256[] memory ids\n  )\n  public\n  view\n  virtual\n  override\n  returns (uint256[] memory)\n  {\n    require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n    uint256[] memory batchBalances = new uint256[](accounts.length);\n\n    for (uint256 i = 0; i < accounts.length; ++i) {\n      batchBalances[i] = balanceOf(accounts[i], ids[i]);\n    }\n\n    return batchBalances;\n  }\n\n  /**\n   * @dev See {IERC1155-setApprovalForAll}.\n   */\n  function setApprovalForAll(address operator, bool approved) public virtual override {\n    require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\n\n    s._operatorApprovals[_msgSender()][operator] = approved;\n    emit ApprovalForAll(_msgSender(), operator, approved);\n  }\n\n  /**\n   * @dev See {IERC1155-isApprovedForAll}.\n   */\n  function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n    return s._operatorApprovals[account][operator];\n  }\n\n  /**\n   * @dev See {IERC1155-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 id,\n    uint256 amount,\n    bytes memory data\n  )\n  public\n  virtual\n  override\n  {\n    require(to != address(0), \"ERC1155: transfer to the zero address\");\n    require(\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\n      \"ERC1155: caller is not owner nor approved\"\n    );\n\n    address operator = _msgSender();\n\n    _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n    uint256 fromBalance = s._balances[id][from];\n    require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n    s._balances[id][from] = fromBalance - amount;\n    s._balances[id][to] += amount;\n\n    emit TransferSingle(operator, from, to, id, amount);\n\n    _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n  }\n\n  /**\n   * @dev See {IERC1155-safeBatchTransferFrom}.\n   */\n  function safeBatchTransferFrom(\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  )\n  public\n  virtual\n  override\n  {\n    require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n    require(to != address(0), \"ERC1155: transfer to the zero address\");\n    require(\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\n      \"ERC1155: transfer caller is not owner nor approved\"\n    );\n\n    address operator = _msgSender();\n\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n    for (uint256 i = 0; i < ids.length; ++i) {\n      uint256 id = ids[i];\n      uint256 amount = amounts[i];\n\n      uint256 fromBalance = s._balances[id][from];\n      require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n      s._balances[id][from] = fromBalance - amount;\n      s._balances[id][to] += amount;\n    }\n\n    emit TransferBatch(operator, from, to, ids, amounts);\n\n    _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n  }\n\n  /**\n   * @dev Sets a new URI for all token types, by relying on the token type ID\n   * substitution mechanism\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n   *\n   * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n   * URI or any of the amounts in the JSON file at said URI will be replaced by\n   * clients with the token type ID.\n   *\n   * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n   * interpreted by clients as\n   * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n   * for token type ID 0x4cce0.\n   *\n   * See {uri}.\n   *\n   * Because these URIs cannot be meaningfully represented by the {URI} event,\n   * this function emits no events.\n   */\n  function _setURI(string memory newuri) internal virtual {\n    s._uri = newuri;\n  }\n\n  /**\n   * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\n   *\n   * Emits a {TransferSingle} event.\n   *\n   * Requirements:\n   *\n   * - `account` cannot be the zero address.\n   * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n   * acceptance magic value.\n   */\n  function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\n    require(account != address(0), \"ERC1155: mint to the zero address\");\n\n    address operator = _msgSender();\n\n    _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n    s._balances[id][account] += amount;\n    emit TransferSingle(operator, address(0), account, id, amount);\n\n    _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\n  }\n\n  /**\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n   *\n   * Requirements:\n   *\n   * - `ids` and `amounts` must have the same length.\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n   * acceptance magic value.\n   */\n  function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\n    require(to != address(0), \"ERC1155: mint to the zero address\");\n    require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n    address operator = _msgSender();\n\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n    for (uint i = 0; i < ids.length; i++) {\n      s._balances[ids[i]][to] += amounts[i];\n    }\n\n    emit TransferBatch(operator, address(0), to, ids, amounts);\n\n    _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n  }\n\n  /**\n   * @dev Destroys `amount` tokens of token type `id` from `account`\n   *\n   * Requirements:\n   *\n   * - `account` cannot be the zero address.\n   * - `account` must have at least `amount` tokens of token type `id`.\n   */\n  function _burn(address account, uint256 id, uint256 amount) internal virtual {\n    require(account != address(0), \"ERC1155: burn from the zero address\");\n\n    address operator = _msgSender();\n\n    _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n    uint256 accountBalance = s._balances[id][account];\n    require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n    s._balances[id][account] = accountBalance - amount;\n\n    emit TransferSingle(operator, account, address(0), id, amount);\n  }\n\n  /**\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n   *\n   * Requirements:\n   *\n   * - `ids` and `amounts` must have the same length.\n   */\n  function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\n    require(account != address(0), \"ERC1155: burn from the zero address\");\n    require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n    address operator = _msgSender();\n\n    _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\n\n    for (uint i = 0; i < ids.length; i++) {\n      uint256 id = ids[i];\n      uint256 amount = amounts[i];\n\n      uint256 accountBalance = s._balances[id][account];\n      require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n      s._balances[id][account] = accountBalance - amount;\n    }\n\n    emit TransferBatch(operator, account, address(0), ids, amounts);\n  }\n\n  /**\n   * @dev Hook that is called before any token transfer. This includes minting\n   * and burning, as well as batched variants.\n   *\n   * The same hook is called on both single and batched variants. For single\n   * transfers, the length of the `id` and `amount` arrays will be 1.\n   *\n   * Calling conditions (for each `id` and `amount` pair):\n   *\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n   * of token type `id` will be  transferred to `to`.\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\n   * for `to`.\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n   * will be burned.\n   * - `from` and `to` are never both zero.\n   * - `ids` and `amounts` have the same, non-zero length.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _beforeTokenTransfer(\n    address operator,\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  )\n  internal\n  virtual\n  { }\n\n  function _doSafeTransferAcceptanceCheck(\n    address operator,\n    address from,\n    address to,\n    uint256 id,\n    uint256 amount,\n    bytes memory data\n  )\n  private\n  {\n    if (to.isContract()) {\n      try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n        if (response != IERC1155Receiver(to).onERC1155Received.selector) {\n          revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n        }\n      } catch Error(string memory reason) {\n        revert(reason);\n      } catch {\n        revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n      }\n    }\n  }\n\n  function _doSafeBatchTransferAcceptanceCheck(\n    address operator,\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  )\n  private\n  {\n    if (to.isContract()) {\n      try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\n        if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\n          revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n        }\n      } catch Error(string memory reason) {\n        revert(reason);\n      } catch {\n        revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n      }\n    }\n  }\n\n  function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n    uint256[] memory array = new uint256[](1);\n    array[0] = element;\n\n    return array;\n  }\n}\n"
    },
    "contracts/openzepplin/IERC1155Diamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Diamond {\n  /**\n   * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n   */\n  event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n  /**\n   * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n   * transfers.\n   */\n  event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n  /**\n   * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n   * `approved`.\n   */\n  event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n  /**\n   * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n   *\n   * If an {URI} event was emitted for `id`, the standard\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n   * returned by {IERC1155MetadataURI-uri}.\n   */\n  event URI(string value, uint256 indexed id);\n\n  /**\n   * @dev Returns the amount of tokens of token type `id` owned by `account`.\n   *\n   * Requirements:\n   *\n   * - `account` cannot be the zero address.\n   */\n  function balanceOf(address account, uint256 id) external view returns (uint256);\n\n  /**\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n   *\n   * Requirements:\n   *\n   * - `accounts` and `ids` must have the same length.\n   */\n  function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n  /**\n   * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n   *\n   * Emits an {ApprovalForAll} event.\n   *\n   * Requirements:\n   *\n   * - `operator` cannot be the caller.\n   */\n  function setApprovalForAll(address operator, bool approved) external;\n\n  /**\n   * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n   *\n   * See {setApprovalForAll}.\n   */\n  function isApprovedForAll(address account, address operator) external view returns (bool);\n\n  /**\n   * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n   *\n   * Emits a {TransferSingle} event.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n   * - `from` must have a balance of tokens of type `id` of at least `amount`.\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n   * acceptance magic value.\n   */\n  function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n  /**\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n   *\n   * Emits a {TransferBatch} event.\n   *\n   * Requirements:\n   *\n   * - `ids` and `amounts` must have the same length.\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n   * acceptance magic value.\n   */\n  function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n"
    },
    "contracts/openzepplin/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver {\n\n  /**\n      @dev Handles the receipt of a single ERC1155 token type. This function is\n      called at the end of a `safeTransferFrom` after the balance has been updated.\n      To accept the transfer, this must return\n      `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n      (i.e. 0xf23a6e61, or its own function selector).\n      @param operator The address which initiated the transfer (i.e. msg.sender)\n      @param from The address which previously owned the token\n      @param id The ID of the token being transferred\n      @param value The amount of tokens being transferred\n      @param data Additional data with no specified format\n      @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n  */\n  function onERC1155Received(\n    address operator,\n    address from,\n    uint256 id,\n    uint256 value,\n    bytes calldata data\n  )\n  external\n  returns(bytes4);\n\n  /**\n      @dev Handles the receipt of a multiple ERC1155 token types. This function\n      is called at the end of a `safeBatchTransferFrom` after the balances have\n      been updated. To accept the transfer(s), this must return\n      `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n      (i.e. 0xbc197c81, or its own function selector).\n      @param operator The address which initiated the batch transfer (i.e. msg.sender)\n      @param from The address which previously owned the token\n      @param ids An array containing ids of each token being transferred (order and length must match values array)\n      @param values An array containing amounts of each token being transferred (order and length must match ids array)\n      @param data Additional data with no specified format\n      @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n  */\n  function onERC1155BatchReceived(\n    address operator,\n    address from,\n    uint256[] calldata ids,\n    uint256[] calldata values,\n    bytes calldata data\n  )\n  external\n  returns(bytes4);\n}\n"
    },
    "contracts/openzepplin/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Diamond.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155Diamond {\n  /**\n   * @dev Returns the URI for token type `id`.\n   *\n   * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n   * clients with the actual token type ID.\n   */\n  function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/OnCyberScenesFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\n//\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./ERC1155URIStorage.sol\";\nimport \"./libraries/LibAppStorage.sol\";\nimport \"./BaseRelayRecipient.sol\";\nimport \"./diamond/LibDiamond.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\ncontract OnCyberScenesFacet is BaseRelayRecipient, ERC1155URIStorage {\n\n  using ECDSA for bytes32;\n  using Counters for Counters.Counter;\n\n  event Minted(address indexed account, uint256 indexed tokenId, uint256 indexed amount);\n\n  function _msgSender() internal override(BaseRelayRecipient, Context) view returns (address) {\n\n    return BaseRelayRecipient._msgSender();\n\n  }\n\n  function initialize(string memory _uri, address _manager, address _trustedForwarder, address _opensea) public {\n\n    LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n    require(ds.contractOwner == msg.sender, \"NO\");\n\n    ds.supportedInterfaces[type(IERC1155).interfaceId] = true;\n    _setURI(_uri);\n    s.manager = _manager;\n    s.trustedForwarder = _trustedForwarder;\n    s.opensea = _opensea;\n\n  }\n\n  function totalSupply() public view returns (uint256) {\n\n    return s.totalSupply.current();\n\n  }\n\n  function manager() public view returns (address) {\n\n    return s.manager;\n\n  }\n\n  function minterNonce(address _minter) public view returns (uint256){\n\n    return s.minterNonce[_minter].current();\n\n  }\n\n  function mint(string memory _uri, uint256 _amount, bytes memory _signature) public returns (uint256 _tokenId) {\n\n    address sender = _msgSender();\n    uint256 nonce = minterNonce(sender);\n\n    bytes memory _message = abi.encodePacked(_uri, _amount, nonce, sender);\n    address _recoveredAddress = keccak256(_message).toEthSignedMessageHash().recover(_signature);\n    require(_recoveredAddress == s.manager, \"NM\");\n\n    // Mint token\n    _tokenId = s.totalSupply.current();\n    _setTokenURI(_tokenId, _uri);\n    s.totalSupply.increment();\n    s.minterNonce[sender].increment();\n    _mint(sender, _tokenId, _amount, \"\");\n\n    emit Minted(sender, _tokenId, _amount);\n\n    if(!isApprovedForAll(sender, s.opensea) ){\n\n      setApprovalForAll(s.opensea, true);\n\n    }\n\n    return _tokenId;\n\n  }\n\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n        } else if (signature.length == 64) {\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                let vs := mload(add(signature, 0x40))\n                r := mload(add(signature, 0x20))\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n                v := add(shr(255, vs), 27)\n            }\n        } else {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/ERC1155URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./openzepplin/ERC1155.sol\";\nimport \"./libraries/LibAppStorage.sol\";\nimport \"./BaseFacet.sol\";\n\nabstract contract ERC1155URIStorage is BaseFacet, ERC1155 {\n\n  function uri(uint256 _tokenId) public view virtual override returns (string memory) {\n\n    string memory tokenURI = s._tokenURIs[_tokenId];\n    require(bytes(tokenURI).length != 0, \"ERC1155URIStorage: tokenId not exist\");\n    return string(abi.encodePacked(super.uri(0), tokenURI));\n\n  }\n\n  function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n    s._tokenURIs[tokenId] = _tokenURI;\n  }\n\n}\n"
    },
    "contracts/BaseRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./libraries/LibAppStorage.sol\";\nimport \"./BaseFacet.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * A base contract to be inherited by any contract that want to receive relayed transactions\n * A subclass must use \"_msgSender()\" instead of \"msg.sender\"\n */\n\nabstract contract BaseRelayRecipient is BaseFacet, Context {\n\n  /*\n   * require a function to be called through GSN only\n   */\n//  modifier trustedForwarderOnly() {\n//    require(msg.sender == address(s.trustedForwarder), \"Function can only be called through the trusted Forwarder\");\n//    _;\n//  }\n\n  function isTrustedForwarder(address forwarder) public view returns(bool) {\n    return forwarder == s.trustedForwarder;\n  }\n\n  /**\n   * return the sender of this call.\n   * if the call came through our trusted forwarder, return the original sender.\n   * otherwise, return `msg.sender`.\n   * should be used in the contract anywhere instead of msg.sender\n   */\n  function _msgSender() internal override virtual view returns (address ret) {\n    if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\n      // At this point we know that the sender is a trusted forwarder,\n      // so we trust that the last bytes of msg.data are the verified sender address.\n      // extract sender address from the end of msg.data\n      assembly {\n        ret := shr(96,calldataload(sub(calldatasize(),20)))\n      }\n    } else {\n      return msg.sender;\n    }\n  }\n}\n"
    },
    "contracts/diamond/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\nimport \"./IDiamondCut.sol\";\n\nlibrary LibDiamond {\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n\n  struct FacetAddressAndPosition {\n    address facetAddress;\n    uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n  }\n\n  struct FacetFunctionSelectors {\n    bytes4[] functionSelectors;\n    uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\n  }\n\n  struct DiamondStorage {\n    // maps function selector to the facet address and\n    // the position of the selector in the facetFunctionSelectors.selectors array\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n    // maps facet addresses to function selectors\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n    // facet addresses\n    address[] facetAddresses;\n    // Used to query if a contract implements an interface.\n    // Used to implement ERC-165.\n    mapping(bytes4 => bool) supportedInterfaces;\n    // owner of the contract\n    address contractOwner;\n  }\n\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n    bytes32 position = DIAMOND_STORAGE_POSITION;\n    assembly {\n      ds.slot := position\n  }\n}\n\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\nfunction setContractOwner(address _newOwner) internal {\nDiamondStorage storage ds = diamondStorage();\naddress previousOwner = ds.contractOwner;\nds.contractOwner = _newOwner;\nemit OwnershipTransferred(previousOwner, _newOwner);\n}\n\nfunction contractOwner() internal view returns (address contractOwner_) {\ncontractOwner_ = diamondStorage().contractOwner;\n}\n\nfunction enforceIsContractOwner() internal view {\nrequire(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\n}\n\nevent DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n// Internal function version of diamondCut\nfunction diamondCut(\nIDiamondCut.FacetCut[] memory _diamondCut,\naddress _init,\nbytes memory _calldata\n) internal {\nfor (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\nIDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\nif (action == IDiamondCut.FacetCutAction.Add) {\naddFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n} else if (action == IDiamondCut.FacetCutAction.Replace) {\nreplaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n} else if (action == IDiamondCut.FacetCutAction.Remove) {\nremoveFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n} else {\nrevert(\"LibDiamondCut: Incorrect FacetCutAction\");\n}\n}\nemit DiamondCut(_diamondCut, _init, _calldata);\ninitializeDiamondCut(_init, _calldata);\n}\n\nfunction addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\nrequire(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\nDiamondStorage storage ds = diamondStorage();\n// uint16 selectorCount = uint16(diamondStorage().selectors.length);\nrequire(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\nuint16 selectorPosition = uint16(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n// add new facet address if it does not exist\nif (selectorPosition == 0) {\nenforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\nds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length);\nds.facetAddresses.push(_facetAddress);\n}\nfor (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\nbytes4 selector = _functionSelectors[selectorIndex];\naddress oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\nrequire(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\nds.facetFunctionSelectors[_facetAddress].functionSelectors.push(selector);\nds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress;\nds.selectorToFacetAndPosition[selector].functionSelectorPosition = selectorPosition;\nselectorPosition++;\n}\n}\n\nfunction replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\nrequire(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\nDiamondStorage storage ds = diamondStorage();\nrequire(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\nuint16 selectorPosition = uint16(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n// add new facet address if it does not exist\nif (selectorPosition == 0) {\nenforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\nds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length);\nds.facetAddresses.push(_facetAddress);\n}\nfor (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\nbytes4 selector = _functionSelectors[selectorIndex];\naddress oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\nrequire(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\nremoveFunction(oldFacetAddress, selector);\n// add function\nds.selectorToFacetAndPosition[selector].functionSelectorPosition = selectorPosition;\nds.facetFunctionSelectors[_facetAddress].functionSelectors.push(selector);\nds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress;\nselectorPosition++;\n}\n}\n\nfunction removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\nrequire(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\nDiamondStorage storage ds = diamondStorage();\n// if function does not exist then do nothing and return\nrequire(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\nfor (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\nbytes4 selector = _functionSelectors[selectorIndex];\naddress oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\nremoveFunction(oldFacetAddress, selector);\n}\n}\n\nfunction removeFunction(address _facetAddress, bytes4 _selector) internal {\nDiamondStorage storage ds = diamondStorage();\nrequire(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n// an immutable function is a function defined directly in a diamond\nrequire(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n// replace selector with last selector, then delete last selector\nuint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\nuint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n// if not the same then replace _selector with lastSelector\nif (selectorPosition != lastSelectorPosition) {\nbytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\nds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\nds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint16(selectorPosition);\n}\n// delete the last selector\nds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\ndelete ds.selectorToFacetAndPosition[_selector];\n\n// if no more selectors for facet address then delete the facet address\nif (lastSelectorPosition == 0) {\n// replace facet address with last facet address and delete last facet address\nuint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\nuint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\nif (facetAddressPosition != lastFacetAddressPosition) {\naddress lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\nds.facetAddresses[facetAddressPosition] = lastFacetAddress;\nds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\n}\nds.facetAddresses.pop();\ndelete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n}\n}\n\nfunction initializeDiamondCut(address _init, bytes memory _calldata) internal {\nif (_init == address(0)) {\nrequire(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\n} else {\nrequire(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\nif (_init != address(this)) {\nenforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");\n}\n(bool success, bytes memory error) = _init.delegatecall(_calldata);\nif (!success) {\nif (error.length > 0) {\n// bubble up the error\nrevert(string(error));\n} else {\nrevert(\"LibDiamondCut: _init function reverted\");\n}\n}\n}\n}\n\nfunction enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\nuint256 contractSize;\nassembly {\ncontractSize := extcodesize(_contract)\n}\nrequire(contractSize > 0, _errorMessage);\n}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n"
    },
    "contracts/diamond/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n  enum FacetCutAction {Add, Replace, Remove}\n  // Add=0, Replace=1, Remove=2\n\n  struct FacetCut {\n    address facetAddress;\n    FacetCutAction action;\n    bytes4[] functionSelectors;\n  }\n\n  /// @notice Add/replace/remove any number of functions and optionally execute\n  ///         a function with delegatecall\n  /// @param _diamondCut Contains the facet addresses and function selectors\n  /// @param _init The address of the contract or facet to execute _calldata\n  /// @param _calldata A function call, including function selector and arguments\n  ///                  _calldata is executed with delegatecall on _init\n  function diamondCut(\n    FacetCut[] calldata _diamondCut,\n    address _init,\n    bytes calldata _calldata\n  ) external;\n\n  event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}