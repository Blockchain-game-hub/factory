{
  "address": "0xc6B6EB8E73B402942F0129AdD75EAe38D3c57031",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_opensea",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "minterNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x595e4bf643fecdfbabf387e704a89b03f602ed9202ee82ef761c95f573230207",
  "receipt": {
    "to": null,
    "from": "0x584E34B153038a19fFf3cdb87942a736Aa0045E4",
    "contractAddress": "0xc6B6EB8E73B402942F0129AdD75EAe38D3c57031",
    "transactionIndex": 0,
    "gasUsed": "1772630",
    "logsBloom": "0x
    "blockHash": "0x2245d31075b288115c6ce24ab71212ec2176eb53f12cdb25062faa2f4e6f817e",
    "transactionHash": "0x595e4bf643fecdfbabf387e704a89b03f602ed9202ee82ef761c95f573230207",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13566525,
        "transactionHash": "0x595e4bf643fecdfbabf387e704a89b03f602ed9202ee82ef761c95f573230207",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000584e34b153038a19fff3cdb87942a736aa0045e4",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000064c329577dc00000000000000000000000000000000000000000000000000066ea5e2fd80ac00000000000000000000000000000000000000000000000062df19aa428c9a8952000000000000000000000000000000000000000000000000066859b06808d000000000000000000000000000000000000000000000000062df1ff67522126552",
        "logIndex": 0,
        "blockHash": "0x2245d31075b288115c6ce24ab71212ec2176eb53f12cdb25062faa2f4e6f817e"
      }
    ],
    "blockNumber": 13566525,
    "cumulativeGasUsed": "1772630",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "dd18f5515459f5fc9a13bf90db35295c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_opensea\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"minterNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OnCyberScenesFacet.sol\":\"OnCyberScenesFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x249bc2a6d919da5f5145950664134cfcf2f66874bda801fd3b8fb861783da079\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n        } else if (signature.length == 64) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let vs := mload(add(signature, 0x40))\\n                r := mload(add(signature, 0x20))\\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                v := add(shr(255, vs), 27)\\n            }\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x2b7a01bbc90040fd4a48bc143ac5a192da3b9bfc559ac08a78eaca40bf49e436\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/BaseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/LibAppStorage.sol\\\";\\n\\nabstract contract BaseFacet {\\n\\n  AppStorage internal s;\\n\\n}\\n\",\"keccak256\":\"0x5c1d3ff0f2bbf8b5a327269ef5b9c23989cf9f6a64a58cc13e207c206262220f\",\"license\":\"MIT\"},\"contracts/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/LibAppStorage.sol\\\";\\nimport \\\"./BaseFacet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\n\\nabstract contract BaseRelayRecipient is BaseFacet, Context {\\n\\n  /*\\n   * require a function to be called through GSN only\\n   */\\n//  modifier trustedForwarderOnly() {\\n//    require(msg.sender == address(s.trustedForwarder), \\\"Function can only be called through the trusted Forwarder\\\");\\n//    _;\\n//  }\\n\\n  function isTrustedForwarder(address forwarder) public view returns(bool) {\\n    return forwarder == s.trustedForwarder;\\n  }\\n\\n  /**\\n   * return the sender of this call.\\n   * if the call came through our trusted forwarder, return the original sender.\\n   * otherwise, return `msg.sender`.\\n   * should be used in the contract anywhere instead of msg.sender\\n   */\\n  function _msgSender() internal override virtual view returns (address ret) {\\n    if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n      // At this point we know that the sender is a trusted forwarder,\\n      // so we trust that the last bytes of msg.data are the verified sender address.\\n      // extract sender address from the end of msg.data\\n      assembly {\\n        ret := shr(96,calldataload(sub(calldatasize(),20)))\\n      }\\n    } else {\\n      return msg.sender;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4fe372858cf1e23b6b9607dfceb47f879c08b0084bea3f30ffe0ae94a382f7be\",\"license\":\"MIT\"},\"contracts/ERC1155URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./openzepplin/ERC1155.sol\\\";\\nimport \\\"./libraries/LibAppStorage.sol\\\";\\nimport \\\"./BaseFacet.sol\\\";\\n\\nabstract contract ERC1155URIStorage is BaseFacet, ERC1155 {\\n\\n  function uri(uint256 _tokenId) public view virtual override returns (string memory) {\\n\\n    string memory tokenURI = s._tokenURIs[_tokenId];\\n    require(bytes(tokenURI).length != 0, \\\"ERC1155URIStorage: tokenId not exist\\\");\\n    return string(abi.encodePacked(super.uri(0), tokenURI));\\n\\n  }\\n\\n  function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n    s._tokenURIs[tokenId] = _tokenURI;\\n  }\\n\\n}\\n\",\"keccak256\":\"0xfb87da8807d62c26acd981097c324b6d728ac5406cde24bc082987a70f88d26a\",\"license\":\"MIT\"},\"contracts/OnCyberScenesFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n//\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./ERC1155URIStorage.sol\\\";\\nimport \\\"./libraries/LibAppStorage.sol\\\";\\nimport \\\"./BaseRelayRecipient.sol\\\";\\nimport \\\"./diamond/LibDiamond.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ncontract OnCyberScenesFacet is BaseRelayRecipient, ERC1155URIStorage {\\n\\n  using ECDSA for bytes32;\\n  using Counters for Counters.Counter;\\n\\n  event Minted(address indexed account, uint256 indexed tokenId, uint256 indexed amount);\\n\\n  function _msgSender() internal override(BaseRelayRecipient, Context) view returns (address) {\\n\\n    return BaseRelayRecipient._msgSender();\\n\\n  }\\n\\n  function initialize(string memory _uri, address _manager, address _trustedForwarder, address _opensea) public {\\n\\n    LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n    require(ds.contractOwner == msg.sender, \\\"NO\\\");\\n\\n    ds.supportedInterfaces[type(IERC1155).interfaceId] = true;\\n    _setURI(_uri);\\n    s.manager = _manager;\\n    s.trustedForwarder = _trustedForwarder;\\n    s.opensea = _opensea;\\n\\n  }\\n\\n  function totalSupply() public view returns (uint256) {\\n\\n    return s.totalSupply.current();\\n\\n  }\\n\\n  function manager() public view returns (address) {\\n\\n    return s.manager;\\n\\n  }\\n\\n  function minterNonce(address _minter) public view returns (uint256){\\n\\n    return s.minterNonce[_minter].current();\\n\\n  }\\n\\n  function mint(string memory _uri, uint256 _amount, bytes memory _signature) public returns (uint256 _tokenId) {\\n\\n    address sender = _msgSender();\\n    uint256 nonce = minterNonce(sender);\\n\\n    bytes memory _message = abi.encodePacked(_uri, _amount, nonce, sender);\\n    address _recoveredAddress = keccak256(_message).toEthSignedMessageHash().recover(_signature);\\n    require(_recoveredAddress == s.manager, \\\"NM\\\");\\n\\n    // Mint token\\n    _tokenId = s.totalSupply.current();\\n    _setTokenURI(_tokenId, _uri);\\n    s.totalSupply.increment();\\n    s.minterNonce[sender].increment();\\n    _mint(sender, _tokenId, _amount, \\\"\\\");\\n\\n    emit Minted(sender, _tokenId, _amount);\\n\\n    if(!isApprovedForAll(sender, s.opensea) ){\\n\\n      setApprovalForAll(s.opensea, true);\\n\\n    }\\n\\n    return _tokenId;\\n\\n  }\\n\\n}\\n\",\"keccak256\":\"0x3823e6d5b47a0b37d2c746be4aead22692ea28769aa7afec3eda6ad2056f440c\",\"license\":\"MIT\"},\"contracts/diamond/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n  enum FacetCutAction {Add, Replace, Remove}\\n  // Add=0, Replace=1, Remove=2\\n\\n  struct FacetCut {\\n    address facetAddress;\\n    FacetCutAction action;\\n    bytes4[] functionSelectors;\\n  }\\n\\n  /// @notice Add/replace/remove any number of functions and optionally execute\\n  ///         a function with delegatecall\\n  /// @param _diamondCut Contains the facet addresses and function selectors\\n  /// @param _init The address of the contract or facet to execute _calldata\\n  /// @param _calldata A function call, including function selector and arguments\\n  ///                  _calldata is executed with delegatecall on _init\\n  function diamondCut(\\n    FacetCut[] calldata _diamondCut,\\n    address _init,\\n    bytes calldata _calldata\\n  ) external;\\n\\n  event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xb7992c8dbfe18ea1ea7db178ee7012c76b04db4701eb9232a1cd3a04c7a6ce6d\",\"license\":\"MIT\"},\"contracts/diamond/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport \\\"./IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n  struct FacetAddressAndPosition {\\n    address facetAddress;\\n    uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n  }\\n\\n  struct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n  }\\n\\n  struct DiamondStorage {\\n    // maps function selector to the facet address and\\n    // the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    // maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    // facet addresses\\n    address[] facetAddresses;\\n    // Used to query if a contract implements an interface.\\n    // Used to implement ERC-165.\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    // owner of the contract\\n    address contractOwner;\\n  }\\n\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n  }\\n}\\n\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\nfunction setContractOwner(address _newOwner) internal {\\nDiamondStorage storage ds = diamondStorage();\\naddress previousOwner = ds.contractOwner;\\nds.contractOwner = _newOwner;\\nemit OwnershipTransferred(previousOwner, _newOwner);\\n}\\n\\nfunction contractOwner() internal view returns (address contractOwner_) {\\ncontractOwner_ = diamondStorage().contractOwner;\\n}\\n\\nfunction enforceIsContractOwner() internal view {\\nrequire(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n}\\n\\nevent DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n// Internal function version of diamondCut\\nfunction diamondCut(\\nIDiamondCut.FacetCut[] memory _diamondCut,\\naddress _init,\\nbytes memory _calldata\\n) internal {\\nfor (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\nIDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\nif (action == IDiamondCut.FacetCutAction.Add) {\\naddFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n} else if (action == IDiamondCut.FacetCutAction.Replace) {\\nreplaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n} else if (action == IDiamondCut.FacetCutAction.Remove) {\\nremoveFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n} else {\\nrevert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n}\\n}\\nemit DiamondCut(_diamondCut, _init, _calldata);\\ninitializeDiamondCut(_init, _calldata);\\n}\\n\\nfunction addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\nrequire(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\nDiamondStorage storage ds = diamondStorage();\\n// uint16 selectorCount = uint16(diamondStorage().selectors.length);\\nrequire(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\nuint16 selectorPosition = uint16(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n// add new facet address if it does not exist\\nif (selectorPosition == 0) {\\nenforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\nds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length);\\nds.facetAddresses.push(_facetAddress);\\n}\\nfor (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\nbytes4 selector = _functionSelectors[selectorIndex];\\naddress oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\nrequire(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\nds.facetFunctionSelectors[_facetAddress].functionSelectors.push(selector);\\nds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress;\\nds.selectorToFacetAndPosition[selector].functionSelectorPosition = selectorPosition;\\nselectorPosition++;\\n}\\n}\\n\\nfunction replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\nrequire(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\nDiamondStorage storage ds = diamondStorage();\\nrequire(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\nuint16 selectorPosition = uint16(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n// add new facet address if it does not exist\\nif (selectorPosition == 0) {\\nenforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\nds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length);\\nds.facetAddresses.push(_facetAddress);\\n}\\nfor (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\nbytes4 selector = _functionSelectors[selectorIndex];\\naddress oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\nrequire(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\nremoveFunction(oldFacetAddress, selector);\\n// add function\\nds.selectorToFacetAndPosition[selector].functionSelectorPosition = selectorPosition;\\nds.facetFunctionSelectors[_facetAddress].functionSelectors.push(selector);\\nds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress;\\nselectorPosition++;\\n}\\n}\\n\\nfunction removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\nrequire(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\nDiamondStorage storage ds = diamondStorage();\\n// if function does not exist then do nothing and return\\nrequire(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\nfor (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\nbytes4 selector = _functionSelectors[selectorIndex];\\naddress oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\nremoveFunction(oldFacetAddress, selector);\\n}\\n}\\n\\nfunction removeFunction(address _facetAddress, bytes4 _selector) internal {\\nDiamondStorage storage ds = diamondStorage();\\nrequire(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n// an immutable function is a function defined directly in a diamond\\nrequire(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n// replace selector with last selector, then delete last selector\\nuint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\nuint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n// if not the same then replace _selector with lastSelector\\nif (selectorPosition != lastSelectorPosition) {\\nbytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\nds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\nds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint16(selectorPosition);\\n}\\n// delete the last selector\\nds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\ndelete ds.selectorToFacetAndPosition[_selector];\\n\\n// if no more selectors for facet address then delete the facet address\\nif (lastSelectorPosition == 0) {\\n// replace facet address with last facet address and delete last facet address\\nuint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\nuint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\nif (facetAddressPosition != lastFacetAddressPosition) {\\naddress lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\nds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\nds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\\n}\\nds.facetAddresses.pop();\\ndelete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n}\\n}\\n\\nfunction initializeDiamondCut(address _init, bytes memory _calldata) internal {\\nif (_init == address(0)) {\\nrequire(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n} else {\\nrequire(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\nif (_init != address(this)) {\\nenforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n}\\n(bool success, bytes memory error) = _init.delegatecall(_calldata);\\nif (!success) {\\nif (error.length > 0) {\\n// bubble up the error\\nrevert(string(error));\\n} else {\\nrevert(\\\"LibDiamondCut: _init function reverted\\\");\\n}\\n}\\n}\\n}\\n\\nfunction enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\nuint256 contractSize;\\nassembly {\\ncontractSize := extcodesize(_contract)\\n}\\nrequire(contractSize > 0, _errorMessage);\\n}\\n}\\n\",\"keccak256\":\"0x3815d34941d0aa6a8da480f4955713ba706a6886c8c906ba81b842b4c0161e9d\",\"license\":\"MIT\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n//\\n\\nstruct AppStorage {\\n  // ERC1155\\n  // Mapping from token ID to account balances\\n  mapping (uint256 => mapping(address => uint256)) _balances;\\n  // Mapping from account to operator approvals\\n  mapping (address => mapping(address => bool)) _operatorApprovals;\\n  // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n  string _uri;\\n\\n  // ERC1155URIStorage\\n  mapping (uint256 => string) _tokenURIs;\\n\\n  // OnCyberScenesFacet\\n  address manager;\\n  address opensea;\\n  Counters.Counter totalSupply;\\n  mapping (address => Counters.Counter) minterNonce;\\n\\n\\n  // BaseRelayRecipient\\n  /*\\n   * Forwarder singleton we accept calls from\\n   */\\n  address trustedForwarder;\\n\\n}\\n\\nlibrary LibAppStorage {\\n  bytes32 constant APP_STORAGE_POSITION = keccak256(\\\"diamond.standard.app.storage\\\");\\n\\n  function diamondStorage() internal pure returns (AppStorage storage ds) {\\n    bytes32 position = APP_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n\\n}\\n\",\"keccak256\":\"0x801b26f58b2207d2c68b9e8cd5d33bface678e3456eb5c13bdffbdd71751d1dd\",\"license\":\"MIT\"},\"contracts/openzepplin/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Diamond.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\nimport \\\"../BaseFacet.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is BaseFacet, Context, IERC1155Diamond, IERC1155MetadataURI {\\n  using Address for address;\\n\\n  /**\\n   * @dev See {IERC1155MetadataURI-uri}.\\n   *\\n   * This implementation returns the same URI for *all* token types. It relies\\n   * on the token type ID substitution mechanism\\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n   *\\n   * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n   * actual token type ID.\\n   */\\n  function uri(uint256) public view virtual override returns (string memory) {\\n    return s._uri;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOf}.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   */\\n  function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n    require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n    return s._balances[id][account];\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOfBatch}.\\n   *\\n   * Requirements:\\n   *\\n   * - `accounts` and `ids` must have the same length.\\n   */\\n  function balanceOfBatch(\\n    address[] memory accounts,\\n    uint256[] memory ids\\n  )\\n  public\\n  view\\n  virtual\\n  override\\n  returns (uint256[] memory)\\n  {\\n    require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n    uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n    for (uint256 i = 0; i < accounts.length; ++i) {\\n      batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n    }\\n\\n    return batchBalances;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved) public virtual override {\\n    require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n    s._operatorApprovals[_msgSender()][operator] = approved;\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n    return s._operatorApprovals[account][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  )\\n  public\\n  virtual\\n  override\\n  {\\n    require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n    require(\\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n      \\\"ERC1155: caller is not owner nor approved\\\"\\n    );\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n    uint256 fromBalance = s._balances[id][from];\\n    require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n    s._balances[id][from] = fromBalance - amount;\\n    s._balances[id][to] += amount;\\n\\n    emit TransferSingle(operator, from, to, id, amount);\\n\\n    _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-safeBatchTransferFrom}.\\n   */\\n  function safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  )\\n  public\\n  virtual\\n  override\\n  {\\n    require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n    require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n    require(\\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n      \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n    );\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    for (uint256 i = 0; i < ids.length; ++i) {\\n      uint256 id = ids[i];\\n      uint256 amount = amounts[i];\\n\\n      uint256 fromBalance = s._balances[id][from];\\n      require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n      s._balances[id][from] = fromBalance - amount;\\n      s._balances[id][to] += amount;\\n    }\\n\\n    emit TransferBatch(operator, from, to, ids, amounts);\\n\\n    _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev Sets a new URI for all token types, by relying on the token type ID\\n   * substitution mechanism\\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n   *\\n   * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n   * URI or any of the amounts in the JSON file at said URI will be replaced by\\n   * clients with the token type ID.\\n   *\\n   * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n   * interpreted by clients as\\n   * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n   * for token type ID 0x4cce0.\\n   *\\n   * See {uri}.\\n   *\\n   * Because these URIs cannot be meaningfully represented by the {URI} event,\\n   * this function emits no events.\\n   */\\n  function _setURI(string memory newuri) internal virtual {\\n    s._uri = newuri;\\n  }\\n\\n  /**\\n   * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n   * acceptance magic value.\\n   */\\n  function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n    require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n    s._balances[id][account] += amount;\\n    emit TransferSingle(operator, address(0), account, id, amount);\\n\\n    _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n   *\\n   * Requirements:\\n   *\\n   * - `ids` and `amounts` must have the same length.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n   * acceptance magic value.\\n   */\\n  function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n    require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n    require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n    for (uint i = 0; i < ids.length; i++) {\\n      s._balances[ids[i]][to] += amounts[i];\\n    }\\n\\n    emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n    _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens of token type `id` from `account`\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens of token type `id`.\\n   */\\n  function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n    require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n    uint256 accountBalance = s._balances[id][account];\\n    require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n    s._balances[id][account] = accountBalance - amount;\\n\\n    emit TransferSingle(operator, account, address(0), id, amount);\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n   *\\n   * Requirements:\\n   *\\n   * - `ids` and `amounts` must have the same length.\\n   */\\n  function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n    require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n    require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n    for (uint i = 0; i < ids.length; i++) {\\n      uint256 id = ids[i];\\n      uint256 amount = amounts[i];\\n\\n      uint256 accountBalance = s._balances[id][account];\\n      require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n      s._balances[id][account] = accountBalance - amount;\\n    }\\n\\n    emit TransferBatch(operator, account, address(0), ids, amounts);\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any token transfer. This includes minting\\n   * and burning, as well as batched variants.\\n   *\\n   * The same hook is called on both single and batched variants. For single\\n   * transfers, the length of the `id` and `amount` arrays will be 1.\\n   *\\n   * Calling conditions (for each `id` and `amount` pair):\\n   *\\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * of token type `id` will be  transferred to `to`.\\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n   * for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n   * will be burned.\\n   * - `from` and `to` are never both zero.\\n   * - `ids` and `amounts` have the same, non-zero length.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  )\\n  internal\\n  virtual\\n  { }\\n\\n  function _doSafeTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  )\\n  private\\n  {\\n    if (to.isContract()) {\\n      try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n        if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n          revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n        }\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n      }\\n    }\\n  }\\n\\n  function _doSafeBatchTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  )\\n  private\\n  {\\n    if (to.isContract()) {\\n      try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n        if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n          revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n        }\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n      }\\n    }\\n  }\\n\\n  function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n    uint256[] memory array = new uint256[](1);\\n    array[0] = element;\\n\\n    return array;\\n  }\\n}\\n\",\"keccak256\":\"0xdb4a74adb6420657a6cd8b967e60d8a14879af9693bee28b0c534f088c19f063\",\"license\":\"MIT\"},\"contracts/openzepplin/IERC1155Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Diamond {\\n  /**\\n   * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n   */\\n  event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n  /**\\n   * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n   * transfers.\\n   */\\n  event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n  /**\\n   * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n   * `approved`.\\n   */\\n  event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n  /**\\n   * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n   *\\n   * If an {URI} event was emitted for `id`, the standard\\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n   * returned by {IERC1155MetadataURI-uri}.\\n   */\\n  event URI(string value, uint256 indexed id);\\n\\n  /**\\n   * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   */\\n  function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n   *\\n   * Requirements:\\n   *\\n   * - `accounts` and `ids` must have the same length.\\n   */\\n  function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n   *\\n   * Emits an {ApprovalForAll} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `operator` cannot be the caller.\\n   */\\n  function setApprovalForAll(address operator, bool approved) external;\\n\\n  /**\\n   * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n   *\\n   * See {setApprovalForAll}.\\n   */\\n  function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n  /**\\n   * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n   * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n   * acceptance magic value.\\n   */\\n  function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n   *\\n   * Emits a {TransferBatch} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `ids` and `amounts` must have the same length.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n   * acceptance magic value.\\n   */\\n  function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xf79180aeee102cdef4e39f61ff17238d856ca397e4c7ccb0f85966ff82888569\",\"license\":\"MIT\"},\"contracts/openzepplin/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Diamond.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155Diamond {\\n  /**\\n   * @dev Returns the URI for token type `id`.\\n   *\\n   * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n   * clients with the actual token type ID.\\n   */\\n  function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7daf935ce6403bb5df52bf52ace5c27e1a83002033b183bbb7eaad12f8fa7fe8\",\"license\":\"MIT\"},\"contracts/openzepplin/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver {\\n\\n  /**\\n      @dev Handles the receipt of a single ERC1155 token type. This function is\\n      called at the end of a `safeTransferFrom` after the balance has been updated.\\n      To accept the transfer, this must return\\n      `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n      (i.e. 0xf23a6e61, or its own function selector).\\n      @param operator The address which initiated the transfer (i.e. msg.sender)\\n      @param from The address which previously owned the token\\n      @param id The ID of the token being transferred\\n      @param value The amount of tokens being transferred\\n      @param data Additional data with no specified format\\n      @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n  */\\n  function onERC1155Received(\\n    address operator,\\n    address from,\\n    uint256 id,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n  external\\n  returns(bytes4);\\n\\n  /**\\n      @dev Handles the receipt of a multiple ERC1155 token types. This function\\n      is called at the end of a `safeBatchTransferFrom` after the balances have\\n      been updated. To accept the transfer(s), this must return\\n      `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n      (i.e. 0xbc197c81, or its own function selector).\\n      @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n      @param from The address which previously owned the token\\n      @param ids An array containing ids of each token being transferred (order and length must match values array)\\n      @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n      @param data Additional data with no specified format\\n      @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n  */\\n  function onERC1155BatchReceived(\\n    address operator,\\n    address from,\\n    uint256[] calldata ids,\\n    uint256[] calldata values,\\n    bytes calldata data\\n  )\\n  external\\n  returns(bytes4);\\n}\\n\",\"keccak256\":\"0x82d5b8a3f7250afa74314766cd41e14cfae3f64907e53a3dc8954dc96a6e795e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611f19806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c8063481c6a751161008c578063a22cb46511610066578063a22cb465146101df578063e985e9c5146101f2578063f242432a1461022e578063f34822b41461024157600080fd5b8063481c6a75146101725780634e1273f41461018d578063572b6c05146101ad57600080fd5b8062fdd58e146100d35780630e89341c146100f957806310662e911461011957806318160ddd1461012c5780631b023947146101345780632eb2c2d61461015d575b600080fd5b6100e66100e136600461186a565b610254565b6040519081526020015b60405180910390f35b61010c610107366004611a5d565b6102eb565b6040516100f09190611c26565b6100e66101273660046119f3565b61041a565b6100e6610606565b6100e66101423660046116d4565b6001600160a01b031660009081526007602052604090205490565b61017061016b366004611727565b610616565b005b6004546040516001600160a01b0390911681526020016100f0565b6101a061019b366004611893565b610900565b6040516100f09190611bee565b6101cf6101bb3660046116d4565b6008546001600160a01b0391821691161490565b60405190151581526020016100f0565b6101706101ed366004611830565b610a62565b6101cf6102003660046116f5565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61017061023c3660046117cd565b610b76565b61017061024f366004611986565b610d43565b60006001600160a01b0383166102c55760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60008181526003602052604081208054606092919061030990611d93565b80601f016020809104026020016040519081016040528092919081815260200182805461033590611d93565b80156103825780601f1061035757610100808354040283529160200191610382565b820191906000526020600020905b81548152906001019060200180831161036557829003601f168201915b505050505090508051600014156103e75760405162461bcd60e51b8152602060048201526024808201527f4552433131353555524953746f726167653a20746f6b656e4964206e6f7420656044820152631e1a5cdd60e21b60648201526084016102bc565b6103f16000610e30565b81604051602001610403929190611adb565b604051602081830303815290604052915050919050565b600080610425610ec7565b90506000610448826001600160a01b031660009081526007602052604090205490565b90506000868683856040516020016104639493929190611b0a565b604051602081830303815290604052905060006104de866104d884805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90610ed1565b6004549091506001600160a01b038083169116146105235760405162461bcd60e51b81526020600482015260026024820152614e4d60f01b60448201526064016102bc565b60065494506105328589610f87565b610540600680546001019055565b6001600160a01b03841660009081526007602052604090208054600101905561057a84868960405180602001604052806000815250610fab565b8685856001600160a01b03167f25b428dfde728ccfaddad7e29e4ac23c24ed7fd1a6e3e3f91894a9a073f5dfff60405160405180910390a46005546001600160a01b03808616600090815260016020908152604080832093909416825291909152205460ff166105fb576005546105fb906001600160a01b03166001610a62565b505050509392505050565b600061061160065490565b905090565b81518351146106785760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016102bc565b6001600160a01b03841661069e5760405162461bcd60e51b81526004016102bc90611c81565b6106a6610ec7565b6001600160a01b0316856001600160a01b031614806106cc57506106cc85610200610ec7565b6107335760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016102bc565b600061073d610ec7565b905060005b845181101561089257600085828151811061076d57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061079957634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156107e95760405162461bcd60e51b81526004016102bc90611cc6565b6107f38282611d4c565b60008001600085815260200190815260200160002060008c6001600160a01b03166001600160a01b03168152602001908152602001600020819055508160008001600085815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546108779190611d34565b925050819055505050508061088b90611dfb565b9050610742565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516108e2929190611c01565b60405180910390a46108f88187878787876110b7565b505050505050565b606081518351146109655760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016102bc565b6000835167ffffffffffffffff81111561098f57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156109b8578160200160208202803683370190505b50905060005b8451811015610a5a57610a1f8582815181106109ea57634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610a1257634e487b7160e01b600052603260045260246000fd5b6020026020010151610254565b828281518110610a3f57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610a5381611dfb565b90506109be565b509392505050565b816001600160a01b0316610a74610ec7565b6001600160a01b03161415610add5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016102bc565b8060016000610aea610ec7565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610b2e610ec7565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610b6a911515815260200190565b60405180910390a35050565b6001600160a01b038416610b9c5760405162461bcd60e51b81526004016102bc90611c81565b610ba4610ec7565b6001600160a01b0316856001600160a01b03161480610bca5750610bca85610200610ec7565b610c285760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016102bc565b6000610c32610ec7565b9050610c53818787610c4388611222565b610c4c88611222565b5050505050565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015610c945760405162461bcd60e51b81526004016102bc90611cc6565b610c9e8482611d4c565b6000868152602081815260408083206001600160a01b038c81168552925280832093909355881681529081208054869290610cda908490611d34565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610d3a82888888888861127b565b50505050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320547fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c906001600160a01b03163314610dc35760405162461bcd60e51b81526020600482015260026024820152614e4f60f01b60448201526064016102bc565b636cdb3d1360e11b60009081526003820160205260409020805460ff19166001179055610def85611345565b50600480546001600160a01b039485166001600160a01b03199182161790915560088054938516938216939093179092556005805491909316911617905550565b606060006002018054610e4290611d93565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6e90611d93565b8015610ebb5780601f10610e9057610100808354040283529160200191610ebb565b820191906000526020600020905b815481529060010190602001808311610e9e57829003601f168201915b50505050509050919050565b600061061161135c565b600080600080845160411415610efb5750505060208201516040830151606084015160001a610f71565b845160401415610f295750505060408201516020830151906001600160ff1b0381169060ff1c601b01610f71565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016102bc565b610f7d86828585611393565b9695505050505050565b60008281526003602090815260409091208251610fa69284019061153c565b505050565b6001600160a01b03841661100b5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016102bc565b6000611015610ec7565b905061102781600087610c4388611222565b6000848152602081815260408083206001600160a01b038916845290915281208054859290611057908490611d34565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610c4c8160008787878761127b565b6001600160a01b0384163b156108f85760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906110fb9089908990889088908890600401611b4b565b602060405180830381600087803b15801561111557600080fd5b505af1925050508015611145575060408051601f3d908101601f191682019092526111429181019061195e565b60015b6111f257611151611e42565b806308c379a0141561118b5750611166611e59565b80611171575061118d565b8060405162461bcd60e51b81526004016102bc9190611c26565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016102bc565b6001600160e01b0319811663bc197c8160e01b14610d3a5760405162461bcd60e51b81526004016102bc90611c39565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061126a57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156108f85760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906112bf9089908990889088908890600401611ba9565b602060405180830381600087803b1580156112d957600080fd5b505af1925050508015611309575060408051601f3d908101601f191682019092526113069181019061195e565b60015b61131557611151611e42565b6001600160e01b0319811663f23a6e6160e01b14610d3a5760405162461bcd60e51b81526004016102bc90611c39565b805161135890600290602084019061153c565b5050565b60006018361080159061137957506008546001600160a01b031633145b1561138b575060131936013560601c90565b503390565b90565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156114105760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016102bc565b8360ff16601b148061142557508360ff16601c145b61147c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016102bc565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156114d0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166115335760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016102bc565b95945050505050565b82805461154890611d93565b90600052602060002090601f01602090048101928261156a57600085556115b0565b82601f1061158357805160ff19168380011785556115b0565b828001600101855582156115b0579182015b828111156115b0578251825591602001919060010190611595565b506115bc9291506115c0565b5090565b5b808211156115bc57600081556001016115c1565b80356001600160a01b03811681146115ec57600080fd5b919050565b600082601f830112611601578081fd5b8135602061160e82611d10565b60405161161b8282611dce565b8381528281019150858301600585901b8701840188101561163a578586fd5b855b858110156116585781358452928401929084019060010161163c565b5090979650505050505050565b600082601f830112611675578081fd5b813567ffffffffffffffff81111561168f5761168f611e2c565b6040516116a6601f8301601f191660200182611dce565b8181528460208386010111156116ba578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156116e5578081fd5b6116ee826115d5565b9392505050565b60008060408385031215611707578081fd5b611710836115d5565b915061171e602084016115d5565b90509250929050565b600080600080600060a0868803121561173e578081fd5b611747866115d5565b9450611755602087016115d5565b9350604086013567ffffffffffffffff80821115611771578283fd5b61177d89838a016115f1565b94506060880135915080821115611792578283fd5b61179e89838a016115f1565b935060808801359150808211156117b3578283fd5b506117c088828901611665565b9150509295509295909350565b600080600080600060a086880312156117e4578081fd5b6117ed866115d5565b94506117fb602087016115d5565b93506040860135925060608601359150608086013567ffffffffffffffff811115611824578182fd5b6117c088828901611665565b60008060408385031215611842578182fd5b61184b836115d5565b91506020830135801515811461185f578182fd5b809150509250929050565b6000806040838503121561187c578182fd5b611885836115d5565b946020939093013593505050565b600080604083850312156118a5578182fd5b823567ffffffffffffffff808211156118bc578384fd5b818501915085601f8301126118cf578384fd5b813560206118dc82611d10565b6040516118e98282611dce565b8381528281019150858301600585901b870184018b1015611908578889fd5b8896505b848710156119315761191d816115d5565b83526001969096019591830191830161190c565b5096505086013592505080821115611947578283fd5b50611954858286016115f1565b9150509250929050565b60006020828403121561196f578081fd5b81516001600160e01b0319811681146116ee578182fd5b6000806000806080858703121561199b578081fd5b843567ffffffffffffffff8111156119b1578182fd5b6119bd87828801611665565b9450506119cc602086016115d5565b92506119da604086016115d5565b91506119e8606086016115d5565b905092959194509250565b600080600060608486031215611a07578081fd5b833567ffffffffffffffff80821115611a1e578283fd5b611a2a87838801611665565b9450602086013593506040860135915080821115611a46578283fd5b50611a5386828701611665565b9150509250925092565b600060208284031215611a6e578081fd5b5035919050565b6000815180845260208085019450808401835b83811015611aa457815187529582019590820190600101611a88565b509495945050505050565b60008151808452611ac7816020860160208601611d63565b601f01601f19169290920160200192915050565b60008351611aed818460208801611d63565b835190830190611b01818360208801611d63565b01949350505050565b60008551611b1c818460208a01611d63565b9190910193845250602083019190915260601b6bffffffffffffffffffffffff19166040820152605401919050565b6001600160a01b0386811682528516602082015260a060408201819052600090611b7790830186611a75565b8281036060840152611b898186611a75565b90508281036080840152611b9d8185611aaf565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611be390830184611aaf565b979650505050505050565b6020815260006116ee6020830184611a75565b604081526000611c146040830185611a75565b82810360208401526115338185611a75565b6020815260006116ee6020830184611aaf565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b600067ffffffffffffffff821115611d2a57611d2a611e2c565b5060051b60200190565b60008219821115611d4757611d47611e16565b500190565b600082821015611d5e57611d5e611e16565b500390565b60005b83811015611d7e578181015183820152602001611d66565b83811115611d8d576000848401525b50505050565b600181811c90821680611da757607f821691505b60208210811415611dc857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff81118282101715611df457611df4611e2c565b6040525050565b6000600019821415611e0f57611e0f611e16565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561139057600481823e5160e01c90565b600060443d1015611e675790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715611e9757505050505090565b8285019150815181811115611eaf5750505050505090565b843d8701016020828501011115611ec95750505050505090565b611ed860208286010187611dce565b50909594505050505056fea264697066735822122037b2beb6287c2eb04514d8c3f14d9bff0e743abb439c1263de9938cecff1893564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ce5760003560e01c8063481c6a751161008c578063a22cb46511610066578063a22cb465146101df578063e985e9c5146101f2578063f242432a1461022e578063f34822b41461024157600080fd5b8063481c6a75146101725780634e1273f41461018d578063572b6c05146101ad57600080fd5b8062fdd58e146100d35780630e89341c146100f957806310662e911461011957806318160ddd1461012c5780631b023947146101345780632eb2c2d61461015d575b600080fd5b6100e66100e136600461186a565b610254565b6040519081526020015b60405180910390f35b61010c610107366004611a5d565b6102eb565b6040516100f09190611c26565b6100e66101273660046119f3565b61041a565b6100e6610606565b6100e66101423660046116d4565b6001600160a01b031660009081526007602052604090205490565b61017061016b366004611727565b610616565b005b6004546040516001600160a01b0390911681526020016100f0565b6101a061019b366004611893565b610900565b6040516100f09190611bee565b6101cf6101bb3660046116d4565b6008546001600160a01b0391821691161490565b60405190151581526020016100f0565b6101706101ed366004611830565b610a62565b6101cf6102003660046116f5565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61017061023c3660046117cd565b610b76565b61017061024f366004611986565b610d43565b60006001600160a01b0383166102c55760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60008181526003602052604081208054606092919061030990611d93565b80601f016020809104026020016040519081016040528092919081815260200182805461033590611d93565b80156103825780601f1061035757610100808354040283529160200191610382565b820191906000526020600020905b81548152906001019060200180831161036557829003601f168201915b505050505090508051600014156103e75760405162461bcd60e51b8152602060048201526024808201527f4552433131353555524953746f726167653a20746f6b656e4964206e6f7420656044820152631e1a5cdd60e21b60648201526084016102bc565b6103f16000610e30565b81604051602001610403929190611adb565b604051602081830303815290604052915050919050565b600080610425610ec7565b90506000610448826001600160a01b031660009081526007602052604090205490565b90506000868683856040516020016104639493929190611b0a565b604051602081830303815290604052905060006104de866104d884805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90610ed1565b6004549091506001600160a01b038083169116146105235760405162461bcd60e51b81526020600482015260026024820152614e4d60f01b60448201526064016102bc565b60065494506105328589610f87565b610540600680546001019055565b6001600160a01b03841660009081526007602052604090208054600101905561057a84868960405180602001604052806000815250610fab565b8685856001600160a01b03167f25b428dfde728ccfaddad7e29e4ac23c24ed7fd1a6e3e3f91894a9a073f5dfff60405160405180910390a46005546001600160a01b03808616600090815260016020908152604080832093909416825291909152205460ff166105fb576005546105fb906001600160a01b03166001610a62565b505050509392505050565b600061061160065490565b905090565b81518351146106785760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016102bc565b6001600160a01b03841661069e5760405162461bcd60e51b81526004016102bc90611c81565b6106a6610ec7565b6001600160a01b0316856001600160a01b031614806106cc57506106cc85610200610ec7565b6107335760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016102bc565b600061073d610ec7565b905060005b845181101561089257600085828151811061076d57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061079957634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156107e95760405162461bcd60e51b81526004016102bc90611cc6565b6107f38282611d4c565b60008001600085815260200190815260200160002060008c6001600160a01b03166001600160a01b03168152602001908152602001600020819055508160008001600085815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546108779190611d34565b925050819055505050508061088b90611dfb565b9050610742565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516108e2929190611c01565b60405180910390a46108f88187878787876110b7565b505050505050565b606081518351146109655760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016102bc565b6000835167ffffffffffffffff81111561098f57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156109b8578160200160208202803683370190505b50905060005b8451811015610a5a57610a1f8582815181106109ea57634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610a1257634e487b7160e01b600052603260045260246000fd5b6020026020010151610254565b828281518110610a3f57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610a5381611dfb565b90506109be565b509392505050565b816001600160a01b0316610a74610ec7565b6001600160a01b03161415610add5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016102bc565b8060016000610aea610ec7565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610b2e610ec7565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610b6a911515815260200190565b60405180910390a35050565b6001600160a01b038416610b9c5760405162461bcd60e51b81526004016102bc90611c81565b610ba4610ec7565b6001600160a01b0316856001600160a01b03161480610bca5750610bca85610200610ec7565b610c285760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016102bc565b6000610c32610ec7565b9050610c53818787610c4388611222565b610c4c88611222565b5050505050565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015610c945760405162461bcd60e51b81526004016102bc90611cc6565b610c9e8482611d4c565b6000868152602081815260408083206001600160a01b038c81168552925280832093909355881681529081208054869290610cda908490611d34565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610d3a82888888888861127b565b50505050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320547fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c906001600160a01b03163314610dc35760405162461bcd60e51b81526020600482015260026024820152614e4f60f01b60448201526064016102bc565b636cdb3d1360e11b60009081526003820160205260409020805460ff19166001179055610def85611345565b50600480546001600160a01b039485166001600160a01b03199182161790915560088054938516938216939093179092556005805491909316911617905550565b606060006002018054610e4290611d93565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6e90611d93565b8015610ebb5780601f10610e9057610100808354040283529160200191610ebb565b820191906000526020600020905b815481529060010190602001808311610e9e57829003601f168201915b50505050509050919050565b600061061161135c565b600080600080845160411415610efb5750505060208201516040830151606084015160001a610f71565b845160401415610f295750505060408201516020830151906001600160ff1b0381169060ff1c601b01610f71565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016102bc565b610f7d86828585611393565b9695505050505050565b60008281526003602090815260409091208251610fa69284019061153c565b505050565b6001600160a01b03841661100b5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016102bc565b6000611015610ec7565b905061102781600087610c4388611222565b6000848152602081815260408083206001600160a01b038916845290915281208054859290611057908490611d34565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610c4c8160008787878761127b565b6001600160a01b0384163b156108f85760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906110fb9089908990889088908890600401611b4b565b602060405180830381600087803b15801561111557600080fd5b505af1925050508015611145575060408051601f3d908101601f191682019092526111429181019061195e565b60015b6111f257611151611e42565b806308c379a0141561118b5750611166611e59565b80611171575061118d565b8060405162461bcd60e51b81526004016102bc9190611c26565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016102bc565b6001600160e01b0319811663bc197c8160e01b14610d3a5760405162461bcd60e51b81526004016102bc90611c39565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061126a57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156108f85760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906112bf9089908990889088908890600401611ba9565b602060405180830381600087803b1580156112d957600080fd5b505af1925050508015611309575060408051601f3d908101601f191682019092526113069181019061195e565b60015b61131557611151611e42565b6001600160e01b0319811663f23a6e6160e01b14610d3a5760405162461bcd60e51b81526004016102bc90611c39565b805161135890600290602084019061153c565b5050565b60006018361080159061137957506008546001600160a01b031633145b1561138b575060131936013560601c90565b503390565b90565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156114105760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016102bc565b8360ff16601b148061142557508360ff16601c145b61147c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016102bc565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156114d0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166115335760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016102bc565b95945050505050565b82805461154890611d93565b90600052602060002090601f01602090048101928261156a57600085556115b0565b82601f1061158357805160ff19168380011785556115b0565b828001600101855582156115b0579182015b828111156115b0578251825591602001919060010190611595565b506115bc9291506115c0565b5090565b5b808211156115bc57600081556001016115c1565b80356001600160a01b03811681146115ec57600080fd5b919050565b600082601f830112611601578081fd5b8135602061160e82611d10565b60405161161b8282611dce565b8381528281019150858301600585901b8701840188101561163a578586fd5b855b858110156116585781358452928401929084019060010161163c565b5090979650505050505050565b600082601f830112611675578081fd5b813567ffffffffffffffff81111561168f5761168f611e2c565b6040516116a6601f8301601f191660200182611dce565b8181528460208386010111156116ba578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156116e5578081fd5b6116ee826115d5565b9392505050565b60008060408385031215611707578081fd5b611710836115d5565b915061171e602084016115d5565b90509250929050565b600080600080600060a0868803121561173e578081fd5b611747866115d5565b9450611755602087016115d5565b9350604086013567ffffffffffffffff80821115611771578283fd5b61177d89838a016115f1565b94506060880135915080821115611792578283fd5b61179e89838a016115f1565b935060808801359150808211156117b3578283fd5b506117c088828901611665565b9150509295509295909350565b600080600080600060a086880312156117e4578081fd5b6117ed866115d5565b94506117fb602087016115d5565b93506040860135925060608601359150608086013567ffffffffffffffff811115611824578182fd5b6117c088828901611665565b60008060408385031215611842578182fd5b61184b836115d5565b91506020830135801515811461185f578182fd5b809150509250929050565b6000806040838503121561187c578182fd5b611885836115d5565b946020939093013593505050565b600080604083850312156118a5578182fd5b823567ffffffffffffffff808211156118bc578384fd5b818501915085601f8301126118cf578384fd5b813560206118dc82611d10565b6040516118e98282611dce565b8381528281019150858301600585901b870184018b1015611908578889fd5b8896505b848710156119315761191d816115d5565b83526001969096019591830191830161190c565b5096505086013592505080821115611947578283fd5b50611954858286016115f1565b9150509250929050565b60006020828403121561196f578081fd5b81516001600160e01b0319811681146116ee578182fd5b6000806000806080858703121561199b578081fd5b843567ffffffffffffffff8111156119b1578182fd5b6119bd87828801611665565b9450506119cc602086016115d5565b92506119da604086016115d5565b91506119e8606086016115d5565b905092959194509250565b600080600060608486031215611a07578081fd5b833567ffffffffffffffff80821115611a1e578283fd5b611a2a87838801611665565b9450602086013593506040860135915080821115611a46578283fd5b50611a5386828701611665565b9150509250925092565b600060208284031215611a6e578081fd5b5035919050565b6000815180845260208085019450808401835b83811015611aa457815187529582019590820190600101611a88565b509495945050505050565b60008151808452611ac7816020860160208601611d63565b601f01601f19169290920160200192915050565b60008351611aed818460208801611d63565b835190830190611b01818360208801611d63565b01949350505050565b60008551611b1c818460208a01611d63565b9190910193845250602083019190915260601b6bffffffffffffffffffffffff19166040820152605401919050565b6001600160a01b0386811682528516602082015260a060408201819052600090611b7790830186611a75565b8281036060840152611b898186611a75565b90508281036080840152611b9d8185611aaf565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611be390830184611aaf565b979650505050505050565b6020815260006116ee6020830184611a75565b604081526000611c146040830185611a75565b82810360208401526115338185611a75565b6020815260006116ee6020830184611aaf565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b600067ffffffffffffffff821115611d2a57611d2a611e2c565b5060051b60200190565b60008219821115611d4757611d47611e16565b500190565b600082821015611d5e57611d5e611e16565b500390565b60005b83811015611d7e578181015183820152602001611d66565b83811115611d8d576000848401525b50505050565b600181811c90821680611da757607f821691505b60208210811415611dc857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff81118282101715611df457611df4611e2c565b6040525050565b6000600019821415611e0f57611e0f611e16565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561139057600481823e5160e01c90565b600060443d1015611e675790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715611e9757505050505090565b8285019150815181811115611eaf5750505050505090565b843d8701016020828501011115611ec95750505050505090565b611ed860208286010187611dce565b50909594505050505056fea264697066735822122037b2beb6287c2eb04514d8c3f14d9bff0e743abb439c1263de9938cecff1893564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 663,
        "contract": "contracts/OnCyberScenesFacet.sol:OnCyberScenesFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)1950_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(Counter)446_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)446_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)1950_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 1923,
            "contract": "contracts/OnCyberScenesFacet.sol:OnCyberScenesFacet",
            "label": "_balances",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 1929,
            "contract": "contracts/OnCyberScenesFacet.sol:OnCyberScenesFacet",
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 1931,
            "contract": "contracts/OnCyberScenesFacet.sol:OnCyberScenesFacet",
            "label": "_uri",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1935,
            "contract": "contracts/OnCyberScenesFacet.sol:OnCyberScenesFacet",
            "label": "_tokenURIs",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 1937,
            "contract": "contracts/OnCyberScenesFacet.sol:OnCyberScenesFacet",
            "label": "manager",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1939,
            "contract": "contracts/OnCyberScenesFacet.sol:OnCyberScenesFacet",
            "label": "opensea",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1942,
            "contract": "contracts/OnCyberScenesFacet.sol:OnCyberScenesFacet",
            "label": "totalSupply",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(Counter)446_storage"
          },
          {
            "astId": 1947,
            "contract": "contracts/OnCyberScenesFacet.sol:OnCyberScenesFacet",
            "label": "minterNonce",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(Counter)446_storage)"
          },
          {
            "astId": 1949,
            "contract": "contracts/OnCyberScenesFacet.sol:OnCyberScenesFacet",
            "label": "trustedForwarder",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Counter)446_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 445,
            "contract": "contracts/OnCyberScenesFacet.sol:OnCyberScenesFacet",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}