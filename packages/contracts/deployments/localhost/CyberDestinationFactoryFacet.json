{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_opensea",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oncyber",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount_oncyber",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "minterNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oncyber",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x64b59b189e2047269c3b58bc54642e2f3787eb8c475d5bc756a9640c3363891a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1978677",
    "logsBloom": "0x
    "blockHash": "0xaf41e7c7c9eab77433c9ec07a31e75beff69361a09c0b906877afca645ad4dcc",
    "transactionHash": "0x64b59b189e2047269c3b58bc54642e2f3787eb8c475d5bc756a9640c3363891a",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1978677",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e3796ee1cd72c463fb037dd949d8a084",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_opensea\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oncyber\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount_oncyber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"minterNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oncyber\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"account\":\"address to query\",\"id\":\"token to query\"},\"returns\":{\"_0\":\"token balance\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"accounts\":\"addresss to query\",\"ids\":\"tokens to query\"},\"returns\":{\"_0\":\"token balances\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"list of quantities of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"ids\":\"list of token IDs\",\"to\":\"receiver of tokens\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"amount\":\"quantity of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"id\":\"token ID\",\"to\":\"receiver of tokens\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address whose approval status to update\",\"status\":\"whether operator should be considered approved\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"query the balance of given token held by given address\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"query the balances of given tokens held by given addresses\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given operator to spend held tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CyberDestinationFactoryFacet.sol\":\"CyberDestinationFactoryFacet\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n        } else if (signature.length == 64) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let vs := mload(add(signature, 0x40))\\n                r := mload(add(signature, 0x20))\\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                v := add(shr(255, vs), 27)\\n            }\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x2b7a01bbc90040fd4a48bc143ac5a192da3b9bfc559ac08a78eaca40bf49e436\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC165} from './IERC165.sol';\\nimport {ERC165Storage} from './ERC165Storage.sol';\\n\\nabstract contract ERC165 is IERC165 {\\n  using ERC165Storage for ERC165Storage.Layout;\\n\\n  function supportsInterface (bytes4 interfaceId) override public view returns (bool) {\\n    return ERC165Storage.layout().isSupportedInterface(interfaceId);\\n  }\\n}\\n\",\"keccak256\":\"0x8bab2729766e324ee37664808bed4e7e90af3a3b45b04610f0da682cd609c24a\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC165Storage {\\n  bytes32 internal constant STORAGE_SLOT = keccak256(\\n    'solidstate.contracts.storage.ERC165'\\n  );\\n\\n  struct Layout {\\n    // TODO: use EnumerableSet to allow post-diamond-cut auditing\\n    mapping (bytes4 => bool) supportedInterfaces;\\n  }\\n\\n  function layout () internal pure returns (Layout storage l) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly { l.slot := slot }\\n  }\\n\\n  function isSupportedInterface (\\n    Layout storage l,\\n    bytes4 interfaceId\\n  ) internal view returns (bool) {\\n    return l.supportedInterfaces[interfaceId];\\n  }\\n\\n  function setSupportedInterface (\\n    Layout storage l,\\n    bytes4 interfaceId,\\n    bool status\\n  ) internal {\\n    require(interfaceId != 0xffffffff, 'ERC165: invalid interface id');\\n    l.supportedInterfaces[interfaceId] = status;\\n  }\\n}\\n\",\"keccak256\":\"0xbdbe4fba638bc34af05ff2d5d79177fb9adad926dccd13687574c8cb3fc9c76a\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC165 {\\n  function supportsInterface (\\n    bytes4 interfaceId\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x96445fcf412ab71f4e95616b081ff3b43468d030a09a72fca287ebab080b0e8f\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ERC1155Base} from './ERC1155Base.sol';\\n\\nabstract contract ERC1155 is ERC1155Base {}\\n\",\"keccak256\":\"0xa1d8288b3c01a4f57c130bf87cc8d61b439b82a1f321b7495d14138761f48183\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// TODO: remove ERC165\\n\\nimport {IERC1155} from './IERC1155.sol';\\nimport {IERC1155Receiver} from './IERC1155Receiver.sol';\\nimport {ERC1155BaseStorage} from './ERC1155BaseStorage.sol';\\nimport {ERC165} from '../../introspection/ERC165.sol';\\nimport {AddressUtils} from '../../utils/AddressUtils.sol';\\n\\n/**\\n * @title Base ERC1155 contract\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155Base is IERC1155, ERC165 {\\n  using AddressUtils for address;\\n\\n  /**\\n   * @notice query the balance of given token held by given address\\n   * @param account address to query\\n   * @param id token to query\\n   * @return token balance\\n   */\\n  function balanceOf (\\n    address account,\\n    uint id\\n  ) override public view returns (uint) {\\n    require(account != address(0), 'ERC1155: balance query for the zero address');\\n    return ERC1155BaseStorage.layout().balances[id][account];\\n  }\\n\\n  /**\\n   * @notice query the balances of given tokens held by given addresses\\n   * @param accounts addresss to query\\n   * @param ids tokens to query\\n   * @return token balances\\n   */\\n  function balanceOfBatch (\\n    address[] memory accounts,\\n    uint[] memory ids\\n  ) override public view returns (uint[] memory) {\\n    require(accounts.length == ids.length, 'ERC1155: accounts and ids length mismatch');\\n\\n    mapping (uint => mapping (address => uint)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n    uint[] memory batchBalances = new uint[](accounts.length);\\n\\n    for (uint i; i < accounts.length; i++) {\\n      require(accounts[i] != address(0), 'ERC1155: batch balance query for the zero address');\\n      batchBalances[i] = balances[ids[i]][accounts[i]];\\n    }\\n\\n    return batchBalances;\\n  }\\n\\n  /**\\n   * @notice query approval status of given operator with respect to given address\\n   * @param account address to query for approval granted\\n   * @param operator address to query for approval received\\n   * @return whether operator is approved to spend tokens held by account\\n   */\\n  function isApprovedForAll (\\n    address account,\\n    address operator\\n  ) override public view returns (bool) {\\n    return ERC1155BaseStorage.layout().operatorApprovals[account][operator];\\n  }\\n\\n  /**\\n   * @notice grant approval to or revoke approval from given operator to spend held tokens\\n   * @param operator address whose approval status to update\\n   * @param status whether operator should be considered approved\\n   */\\n  function setApprovalForAll (\\n    address operator,\\n    bool status\\n  ) override public {\\n    require(msg.sender != operator, 'ERC1155: setting approval status for self');\\n    ERC1155BaseStorage.layout().operatorApprovals[msg.sender][operator] = status;\\n    emit ApprovalForAll(msg.sender, operator, status);\\n  }\\n\\n  /**\\n   * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n   * @param from sender of tokens\\n   * @param to receiver of tokens\\n   * @param id token ID\\n   * @param amount quantity of tokens to transfer\\n   * @param data data payload\\n   */\\n  function safeTransferFrom (\\n    address from,\\n    address to,\\n    uint id,\\n    uint amount,\\n    bytes memory data\\n  ) override public {\\n    require(from == msg.sender || isApprovedForAll(from, msg.sender), 'ERC1155: caller is not owner nor approved');\\n    _safeTransfer(msg.sender, from, to, id, amount, data);\\n  }\\n\\n  /**\\n   * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n   * @param from sender of tokens\\n   * @param to receiver of tokens\\n   * @param ids list of token IDs\\n   * @param amounts list of quantities of tokens to transfer\\n   * @param data data payload\\n   */\\n  function safeBatchTransferFrom (\\n    address from,\\n    address to,\\n    uint[] memory ids,\\n    uint[] memory amounts,\\n    bytes memory data\\n  ) override public {\\n    require(from == msg.sender || isApprovedForAll(from, msg.sender), 'ERC1155: caller is not owner nor approved');\\n    _safeTransferBatch(msg.sender, from, to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @notice mint given quantity of tokens for given address\\n   * @dev ERC1155Receiver implemenation is not checked\\n   * @param account beneficiary of minting\\n   * @param id token ID\\n   * @param amount quantity of tokens to mint\\n   * @param data data payload\\n   */\\n  function _mint (\\n    address account,\\n    uint id,\\n    uint amount,\\n    bytes memory data\\n  ) virtual internal {\\n    require(account != address(0), 'ERC1155: mint to the zero address');\\n\\n    _beforeTokenTransfer(msg.sender, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n    mapping (address => uint) storage balances = ERC1155BaseStorage.layout().balances[id];\\n    balances[account] += amount;\\n\\n    emit TransferSingle(msg.sender, address(0), account, id, amount);\\n  }\\n\\n  /**\\n   * @notice mint given quantity of tokens for given address\\n   * @param account beneficiary of minting\\n   * @param id token ID\\n   * @param amount quantity of tokens to mint\\n   * @param data data payload\\n   */\\n  function _safeMint (\\n    address account,\\n    uint id,\\n    uint amount,\\n    bytes memory data\\n  ) virtual internal {\\n    _doSafeTransferAcceptanceCheck(msg.sender, address(0), account, id, amount, data);\\n    _mint(account, id, amount, data);\\n  }\\n\\n  /**\\n   * @notice mint batch of tokens for given address\\n   * @dev ERC1155Receiver implemenation is not checked\\n   * @param account beneficiary of minting\\n   * @param ids list of token IDs\\n   * @param amounts list of quantities of tokens to mint\\n   * @param data data payload\\n   */\\n  function _mintBatch (\\n    address account,\\n    uint[] memory ids,\\n    uint[] memory amounts,\\n    bytes memory data\\n  ) virtual internal {\\n    require(account != address(0), 'ERC1155: mint to the zero address');\\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n\\n    _beforeTokenTransfer(msg.sender, address(0), account, ids, amounts, data);\\n\\n    mapping (uint => mapping (address => uint)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n    for (uint i; i < ids.length; i++) {\\n      uint id = ids[i];\\n      balances[id][account] += amounts[i];\\n    }\\n\\n    emit TransferBatch(msg.sender, address(0), account, ids, amounts);\\n  }\\n\\n  /**\\n   * @notice mint batch of tokens for given address\\n   * @param account beneficiary of minting\\n   * @param ids list of token IDs\\n   * @param amounts list of quantities of tokens to mint\\n   * @param data data payload\\n   */\\n  function _safeMintBatch (\\n    address account,\\n    uint[] memory ids,\\n    uint[] memory amounts,\\n    bytes memory data\\n  ) virtual internal {\\n    _doSafeBatchTransferAcceptanceCheck(msg.sender, address(0), account, ids, amounts, data);\\n    _mintBatch(account, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @notice burn given quantity of tokens held by given address\\n   * @param account holder of tokens to burn\\n   * @param id token ID\\n   * @param amount quantity of tokens to burn\\n   */\\n  function _burn (\\n    address account,\\n    uint id,\\n    uint amount\\n  ) virtual internal {\\n    require(account != address(0), 'ERC1155: burn from the zero address');\\n\\n    _beforeTokenTransfer(msg.sender, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), '');\\n\\n    mapping (address => uint) storage balances = ERC1155BaseStorage.layout().balances[id];\\n    require(balances[account] >= amount, 'ERC1155: burn amount exceeds balances');\\n    balances[account] -= amount;\\n\\n    emit TransferSingle(msg.sender, account, address(0), id, amount);\\n  }\\n\\n  /**\\n   * @notice burn given batch of tokens held by given address\\n   * @param account holder of tokens to burn\\n   * @param ids token IDs\\n   * @param amounts quantities of tokens to burn\\n   */\\n  function _burnBatch (\\n    address account,\\n    uint[] memory ids,\\n    uint[] memory amounts\\n  ) virtual internal {\\n    require(account != address(0), 'ERC1155: burn from the zero address');\\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n\\n    _beforeTokenTransfer(msg.sender, account, address(0), ids, amounts, '');\\n\\n    mapping (uint => mapping (address => uint)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n    for (uint i; i < ids.length; i++) {\\n      uint id = ids[i];\\n      require(balances[id][account] >= amounts[i], 'ERC1155: burn amount exceeds balance');\\n      balances[id][account] -= amounts[i];\\n    }\\n\\n    emit TransferBatch(msg.sender, account, address(0), ids, amounts);\\n  }\\n\\n  /**\\n   * @notice transfer tokens between given addresses\\n   * @dev ERC1155Receiver implemenation is not checked\\n   * @param operator executor of transfer\\n   * @param sender sender of tokens\\n   * @param recipient receiver of tokens\\n   * @param id token ID\\n   * @param amount quantity of tokens to transfer\\n   * @param data data payload\\n   */\\n  function _transfer (\\n    address operator,\\n    address sender,\\n    address recipient,\\n    uint id,\\n    uint amount,\\n    bytes memory data\\n  ) virtual internal {\\n    require(recipient != address(0), 'ERC1155: transfer to the zero address');\\n\\n    _beforeTokenTransfer(operator, sender, recipient, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n    mapping (uint => mapping (address => uint)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n    uint256 senderBalance = balances[id][sender];\\n    require(senderBalance >= amount, 'ERC1155: insufficient balances for transfer');\\n    unchecked {\\n      balances[id][sender] = senderBalance - amount;\\n    }\\n    balances[id][recipient] += amount;\\n\\n    emit TransferSingle(operator, sender, recipient, id, amount);\\n  }\\n\\n  /**\\n   * @notice transfer tokens between given addresses\\n   * @param operator executor of transfer\\n   * @param sender sender of tokens\\n   * @param recipient receiver of tokens\\n   * @param id token ID\\n   * @param amount quantity of tokens to transfer\\n   * @param data data payload\\n   */\\n  function _safeTransfer (\\n    address operator,\\n    address sender,\\n    address recipient,\\n    uint id,\\n    uint amount,\\n    bytes memory data\\n  ) virtual internal {\\n    _doSafeTransferAcceptanceCheck(operator, sender, recipient, id, amount, data);\\n    _transfer(operator, sender, recipient, id, amount, data);\\n  }\\n\\n  /**\\n   * @notice transfer batch of tokens between given addresses\\n   * @dev ERC1155Receiver implemenation is not checked\\n   * @param operator executor of transfer\\n   * @param sender sender of tokens\\n   * @param recipient receiver of tokens\\n   * @param ids token IDs\\n   * @param amounts quantities of tokens to transfer\\n   * @param data data payload\\n   */\\n  function _transferBatch (\\n    address operator,\\n    address sender,\\n    address recipient,\\n    uint[] memory ids,\\n    uint[] memory amounts,\\n    bytes memory data\\n  ) virtual internal {\\n    require(recipient != address(0), 'ERC1155: transfer to the zero address');\\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n\\n    _beforeTokenTransfer(operator, sender, recipient, ids, amounts, data);\\n\\n    mapping (uint => mapping (address => uint)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n    for (uint i; i < ids.length; i++) {\\n      uint token = ids[i];\\n      uint amount = amounts[i];\\n\\n      uint256 senderBalance = balances[token][sender];\\n      require(senderBalance >= amount, 'ERC1155: insufficient balances for transfer');\\n      unchecked {\\n        balances[token][sender] = senderBalance - amount;\\n      }\\n      balances[token][recipient] += amount;\\n    }\\n\\n    emit TransferBatch(operator, sender, recipient, ids, amounts);\\n  }\\n\\n  /**\\n   * @notice transfer batch of tokens between given addresses\\n   * @param operator executor of transfer\\n   * @param sender sender of tokens\\n   * @param recipient receiver of tokens\\n   * @param ids token IDs\\n   * @param amounts quantities of tokens to transfer\\n   * @param data data payload\\n   */\\n  function _safeTransferBatch (\\n    address operator,\\n    address sender,\\n    address recipient,\\n    uint[] memory ids,\\n    uint[] memory amounts,\\n    bytes memory data\\n  ) virtual internal {\\n    _doSafeBatchTransferAcceptanceCheck(operator, sender, recipient, ids, amounts, data);\\n    _transferBatch(operator, sender, recipient, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @notice wrap given element in array of length 1\\n   * @param element element to wrap\\n   * @return singleton array\\n   */\\n  function _asSingletonArray (\\n    uint element\\n  ) private pure returns (uint[] memory) {\\n    uint[] memory array = new uint[](1);\\n    array[0] = element;\\n    return array;\\n  }\\n\\n  /**\\n   * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n   * @param operator executor of transfer\\n   * @param from sender of tokens\\n   * @param to receiver of tokens\\n   * @param id token ID\\n   * @param amount quantity of tokens to transfer\\n   * @param data data payload\\n   */\\n  function _doSafeTransferAcceptanceCheck (\\n    address operator,\\n    address from,\\n    address to,\\n    uint id,\\n    uint amount,\\n    bytes memory data\\n  ) private {\\n    if (to.isContract()) {\\n      try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n        require(\\n          response == IERC1155Receiver.onERC1155Received.selector,\\n          'ERC1155: ERC1155Receiver rejected tokens'\\n        );\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n      }\\n    }\\n  }\\n\\n  /**\\n  * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n   * @param operator executor of transfer\\n   * @param from sender of tokens\\n   * @param to receiver of tokens\\n   * @param ids token IDs\\n   * @param amounts quantities of tokens to transfer\\n   * @param data data payload\\n   */\\n  function _doSafeBatchTransferAcceptanceCheck (\\n    address operator,\\n    address from,\\n    address to,\\n    uint[] memory ids,\\n    uint[] memory amounts,\\n    bytes memory data\\n  ) private {\\n    if (to.isContract()) {\\n      try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n        require(\\n          response == IERC1155Receiver.onERC1155BatchReceived.selector,\\n          'ERC1155: ERC1155Receiver rejected tokens'\\n        );\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice ERC1155 hook, called before all transfers including mint and burn\\n   * @dev function should be overridden and new implemenation must call super\\n   * @dev called for both single and batch transfers\\n   * @param operator executor of transfer\\n   * @param from sender of tokens\\n   * @param to receiver of tokens\\n   * @param ids token IDs\\n   * @param amounts quantities of tokens to transfer\\n   * @param data data payload\\n   */\\n  function _beforeTokenTransfer (\\n    address operator,\\n    address from,\\n    address to,\\n    uint[] memory ids,\\n    uint[] memory amounts,\\n    bytes memory data\\n  ) virtual internal {}\\n}\\n\",\"keccak256\":\"0xbd01dfa09de27f5362c9286f36a4a587c7e2fa151068d5bd600aec841a585257\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/ERC1155BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC1155BaseStorage {\\n  bytes32 internal constant STORAGE_SLOT = keccak256(\\n    'solidstate.contracts.storage.ERC1155Base'\\n  );\\n\\n  struct Layout {\\n    mapping (uint => mapping (address => uint)) balances;\\n    mapping (address => mapping (address => bool)) operatorApprovals;\\n  }\\n\\n  function layout () internal pure returns (Layout storage l) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly { l.slot := slot }\\n  }\\n}\\n\",\"keccak256\":\"0x945ecd5a1e3c3ff3a5137e7359de75b643827e755954d8c7cef717491a307e5d\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC165} from '../../introspection/IERC165.sol';\\n\\ninterface IERC1155 is IERC165 {\\n  event TransferSingle (\\n    address indexed operator,\\n    address indexed from,\\n    address indexed to,\\n    uint256 id,\\n    uint256 value\\n  );\\n\\n  event TransferBatch (\\n    address indexed operator,\\n    address indexed from,\\n    address indexed to,\\n    uint256[] ids,\\n    uint256[] values\\n  );\\n\\n  event ApprovalForAll (\\n    address indexed account,\\n    address indexed operator,\\n    bool approved\\n  );\\n\\n  event URI (\\n    string value,\\n    uint256 indexed id\\n  );\\n\\n  function balanceOf (\\n    address account,\\n    uint256 id\\n  ) external view returns (uint256);\\n\\n  function balanceOfBatch (\\n    address[] calldata accounts,\\n    uint256[] calldata ids\\n  ) external view returns (uint256[] memory);\\n\\n  function setApprovalForAll (\\n    address operator,\\n    bool approved\\n  ) external;\\n\\n  function isApprovedForAll (\\n    address account,\\n    address operator\\n  ) external view returns (bool);\\n\\n  function safeTransferFrom (\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external;\\n\\n  function safeBatchTransferFrom (\\n    address from,\\n    address to,\\n    uint256[] calldata ids,\\n    uint256[] calldata amounts,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0xb50fe57ebb30fb35f4733338b95f95a65f88c9b11c42eca9e7bceffbae62d035\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC165} from '../../introspection/IERC165.sol';\\n\\ninterface IERC1155Receiver is IERC165 {\\n  function onERC1155Received (\\n    address operator,\\n    address from,\\n    uint256 id,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bytes4);\\n\\n  function onERC1155BatchReceived (\\n    address operator,\\n    address from,\\n    uint256[] calldata ids,\\n    uint256[] calldata values,\\n    bytes calldata data\\n  ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7bb9063bc347638e0e266056d3531b5bd05dfd741c473b2eeb68edcdbeae0269\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressUtils {\\n  function toString (address account) internal pure returns (string memory) {\\n    bytes32 value = bytes32(uint256(uint160(account)));\\n    bytes memory alphabet = '0123456789abcdef';\\n    bytes memory chars = new bytes(42);\\n\\n    chars[0] = '0';\\n    chars[1] = 'x';\\n\\n    for (uint256 i = 0; i < 20; i++) {\\n      chars[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n      chars[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n    }\\n\\n    return string(chars);\\n  }\\n\\n  function isContract (address account) internal view returns (bool) {\\n    uint size;\\n    assembly { size := extcodesize(account) }\\n    return size > 0;\\n  }\\n\\n  function sendValue (address payable account, uint amount) internal {\\n    (bool success, ) = account.call{ value: amount }('');\\n    require(success, 'AddressUtils: failed to send value');\\n  }\\n\\n  function functionCall (address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, 'AddressUtils: failed low-level call');\\n  }\\n\\n  function functionCall (address target, bytes memory data, string memory error) internal returns (bytes memory) {\\n    return _functionCallWithValue(target, data, 0, error);\\n  }\\n\\n  function functionCallWithValue (address target, bytes memory data, uint value) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, 'AddressUtils: failed low-level call with value');\\n  }\\n\\n  function functionCallWithValue (address target, bytes memory data, uint value, string memory error) internal returns (bytes memory) {\\n    require(address(this).balance >= value, 'AddressUtils: insufficient balance for call');\\n    return _functionCallWithValue(target, data, value, error);\\n  }\\n\\n  function _functionCallWithValue (address target, bytes memory data, uint value, string memory error) private returns (bytes memory) {\\n    require(isContract(target), 'AddressUtils: function call to non-contract');\\n\\n    (bool success, bytes memory returnData) = target.call{ value: value }(data);\\n\\n    if (success) {\\n      return returnData;\\n    } else if (returnData.length > 0) {\\n      assembly {\\n        let returnData_size := mload(returnData)\\n        revert(add(32, returnData), returnData_size)\\n      }\\n    } else {\\n      revert(error);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x49c456abdfeec4082581e81731233d2a686c85d75c6bc48c2e685a62c03adb9f\",\"license\":\"MIT\"},\"contracts/BaseRelayRecipient/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./BaseRelayRecipientStorage.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\n\\nabstract contract BaseRelayRecipient is Context {\\n\\n  /*\\n   * require a function to be called through GSN only\\n   */\\n//  modifier trustedForwarderOnly() {\\n//    require(msg.sender == address(s.trustedForwarder), \\\"Function can only be called through the trusted Forwarder\\\");\\n//    _;\\n//  }\\n\\n  function isTrustedForwarder(address forwarder) public view returns(bool) {\\n    return forwarder == BaseRelayRecipientStorage.layout().trustedForwarder;\\n  }\\n\\n  /**\\n   * return the sender of this call.\\n   * if the call came through our trusted forwarder, return the original sender.\\n   * otherwise, return `msg.sender`.\\n   * should be used in the contract anywhere instead of msg.sender\\n   */\\n  function _msgSender() internal override virtual view returns (address ret) {\\n    if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n      // At this point we know that the sender is a trusted forwarder,\\n      // so we trust that the last bytes of msg.data are the verified sender address.\\n      // extract sender address from the end of msg.data\\n      assembly {\\n        ret := shr(96,calldataload(sub(calldatasize(),20)))\\n      }\\n    } else {\\n      return msg.sender;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9836038fa3450f90a4570d9b4630e60f118447631f26787d44f954731600f24b\",\"license\":\"MIT\"},\"contracts/BaseRelayRecipient/BaseRelayRecipientStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.5;\\n\\nlibrary BaseRelayRecipientStorage {\\n  bytes32 internal constant STORAGE_SLOT = keccak256(\\n    'diamond.storage.BaseRelayRecipientStorage'\\n  );\\n\\n  struct Layout {\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address trustedForwarder;\\n  }\\n\\n  function layout() internal pure returns (Layout storage l) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly { l.slot := slot }\\n  }\\n\\n}\\n\",\"keccak256\":\"0x883336b2b04ffa069929a1890783c2fe81a71c01f062440e77729640e673cb7c\",\"license\":\"MIT\"},\"contracts/CyberDestinationFactoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.5;\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport '@solidstate/contracts/token/ERC1155/IERC1155.sol';\\nimport \\\"./ERC1155URI/ERC1155URI.sol\\\";\\nimport \\\"./BaseRelayRecipient/BaseRelayRecipient.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./Diamond/LibDiamond.sol\\\";\\nimport \\\"./BaseRelayRecipient/BaseRelayRecipientStorage.sol\\\";\\nimport \\\"./libraries/LibAppStorage.sol\\\";\\n\\ncontract CyberDestinationFactoryFacet is BaseRelayRecipient, ERC1155URI {\\n\\n  using ECDSA for bytes32;\\n  using Counters for Counters.Counter;\\n\\n  event Minted(address indexed account, uint256 indexed tokenId, uint256 indexed amount);\\n\\n  function initialize(string memory _uri, address _manager, address _trustedForwarder, address _opensea, address _oncyber) public {\\n\\n    require(LibDiamond.diamondStorage().contractOwner == msg.sender, \\\"NO\\\");\\n\\n    BaseRelayRecipientStorage.layout().trustedForwarder = _trustedForwarder;\\n    LibDiamond.diamondStorage().supportedInterfaces[type(IERC1155).interfaceId] = true;\\n    setURI(_uri);\\n    LibAppStorage.layout().manager = _manager;\\n    LibAppStorage.layout().opensea = _opensea;\\n    LibAppStorage.layout().oncyber = _oncyber;\\n\\n  }\\n\\n  function totalSupply() public view returns (uint256) {\\n\\n    return LibAppStorage.layout().totalSupply.current();\\n\\n  }\\n\\n  function manager() public view returns (address) {\\n\\n    return LibAppStorage.layout().manager;\\n\\n  }\\n\\n  function oncyber() public view returns (address) {\\n\\n    return LibAppStorage.layout().oncyber;\\n\\n  }\\n\\n  function minterNonce(address _minter) public view returns (uint256){\\n\\n    return LibAppStorage.layout().minterNonce[_minter].current();\\n\\n  }\\n\\n  function mint(string memory _uri, uint256 _amount, uint256 _amount_oncyber, bytes memory _signature) public returns (uint256 _tokenId) {\\n\\n    address sender = _msgSender();\\n    uint256 nonce = minterNonce(sender);\\n\\n    bytes memory _message = abi.encodePacked(_uri, _amount, _amount_oncyber, nonce, sender);\\n    address _recoveredAddress = keccak256(_message).toEthSignedMessageHash().recover(_signature);\\n    require(_recoveredAddress == LibAppStorage.layout().manager, \\\"NM\\\");\\n\\n    // Mint token\\n    _tokenId = LibAppStorage.layout().totalSupply.current();\\n    setTokenURI(_tokenId, _uri);\\n    LibAppStorage.layout().totalSupply.increment();\\n    LibAppStorage.layout().minterNonce[sender].increment();\\n    _safeMint(sender, _tokenId, _amount + _amount_oncyber, \\\"\\\");\\n    _safeTransfer(sender, sender, LibAppStorage.layout().oncyber, _tokenId, _amount_oncyber, \\\"\\\");\\n\\n    emit Minted(sender, _tokenId, _amount);\\n\\n    if(!isApprovedForAll(sender, LibAppStorage.layout().opensea) ){\\n\\n      setApprovalForAll(LibAppStorage.layout().opensea, true);\\n\\n    }\\n\\n    return _tokenId;\\n\\n  }\\n\\n}\\n\",\"keccak256\":\"0x055cba97d410a437966fe1ea6e3a5b5b0ea5973671eab250aad3ef5568450129\",\"license\":\"MIT\"},\"contracts/Diamond/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n  struct FacetAddressAndPosition {\\n    address facetAddress;\\n    uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n  }\\n\\n  struct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n  }\\n\\n  struct DiamondStorage {\\n    // maps function selector to the facet address and\\n    // the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    // maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    // facet addresses\\n    address[] facetAddresses;\\n    // Used to query if a contract implements an interface.\\n    // Used to implement ERC-165.\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    // owner of the contract\\n    address contractOwner;\\n  }\\n\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly { ds.slot := position }\\n  }\\n\\n}\\n\",\"keccak256\":\"0x2882b6f6d73552b368128df6e601975cb7c4da2e5374704b505267186e1e2933\",\"license\":\"MIT\"},\"contracts/ERC1155URI/ERC1155URI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.5;\\n\\nimport \\\"@solidstate/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"./ERC1155URIStorage.sol\\\";\\n\\nabstract contract ERC1155URI is ERC1155 {\\n\\n  function uri(uint256 _tokenId) public view virtual returns (string memory) {\\n\\n    string memory tokenURI = ERC1155URIStorage.layout().tokenURIs[_tokenId];\\n    require(bytes(tokenURI).length != 0, \\\"ERC1155URI: tokenId not exist\\\");\\n    return string(abi.encodePacked(ERC1155URIStorage.layout().uri, tokenURI));\\n\\n  }\\n\\n  function setURI(string memory new_uri) internal virtual {\\n    ERC1155URIStorage.layout().uri = new_uri;\\n  }\\n\\n  function setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n    ERC1155URIStorage.layout().tokenURIs[tokenId] = _tokenURI;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x6b359edd19bae6f42ab81360ef196a561b18aeccf19a2fc38492274aa2b4bec9\",\"license\":\"MIT\"},\"contracts/ERC1155URI/ERC1155URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.5;\\n\\nlibrary ERC1155URIStorage {\\n  bytes32 internal constant STORAGE_SLOT = keccak256(\\n    'diamond.storage.ERC1155URI'\\n  );\\n\\n  struct Layout {\\n    mapping (uint256 => string) tokenURIs;\\n    string uri;\\n  }\\n\\n  function layout() internal pure returns (Layout storage l) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly { l.slot := slot }\\n  }\\n\\n}\\n\",\"keccak256\":\"0x3f8f62f818daf01405c2077c12bb856fd487f2296624e91b9e8e67c25d4ba35f\",\"license\":\"MIT\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\nlibrary LibAppStorage {\\n  bytes32 constant STORAGE_SLOT = keccak256(\\\"app.storage\\\");\\n\\n  struct Layout {\\n\\n    address manager;\\n    address opensea;\\n    Counters.Counter totalSupply;\\n    mapping (address => Counters.Counter) minterNonce;\\n    address oncyber;\\n\\n  }\\n\\n  function layout() internal pure returns (Layout storage l) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly { l.slot := slot }\\n  }\\n\\n}\\n\",\"keccak256\":\"0x32222f44756c1c14fb6351ff795c36b022735e5fea836e100997e26e62ccf25d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506122d3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f45760003560e01c8063481c6a7511610097578063a22cb46511610066578063a22cb4651461024b578063bc01188e1461025e578063e985e9c51461028e578063f242432a146102a157600080fd5b8063481c6a75146101a55780634e1273f4146101d7578063572b6c05146101f75780637a15c41c1461023857600080fd5b80630e89341c116100d35780630e89341c1461015757806318160ddd146101775780631b0239471461017f5780632eb2c2d61461019257600080fd5b8062fdd58e146100f957806301ffc9a71461011f5780630b885ac314610142575b600080fd5b61010c610107366004611ab6565b6102b4565b6040519081526020015b60405180910390f35b61013261012d366004611bb1565b61035a565b6040519015158152602001610116565b610155610150366004611beb565b61039d565b005b61016a610165366004611ce2565b610526565b6040516101169190611f3e565b61010c61067f565b61010c61018d366004611916565b6106a0565b6101556101a036600461196b565b6106dd565b60008051602061225e833981519152546001600160a01b03165b6040516001600160a01b039091168152602001610116565b6101ea6101e5366004611ae0565b61072a565b6040516101169190611f06565b610132610205366004611916565b7fa5e014e253d3b66bd348c3cdd05f38b9805fff0b6471d004b58c6ada26cae993546001600160a01b0390811691161490565b61010c610246366004611c6b565b61092a565b610155610259366004611a7a565b610bc7565b7f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a62546001600160a01b03166101bf565b61013261029c366004611938565b610cbd565b6101556102af366004611a15565b610d0a565b60006001600160a01b0383166103255760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b60008051602061227e8339815191526000928352602090815260408084206001600160a01b0395909516845293905250205490565b6001600160e01b0319811660009081527f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e705602052604081205460ff165b92915050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031633146103fb5760405162461bcd60e51b81526020600482015260026024820152614e4f60f01b604482015260640161031c565b7fa5e014e253d3b66bd348c3cdd05f38b9805fff0b6471d004b58c6ada26cae99380546001600160a01b0319166001600160a01b038516179055636cdb3d1360e11b6000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f6020527f845f7f8d885943dffdc1524acbd9538b2923f93aad26d306df3b8982c7f0632d805460ff1916600117905561049985610d50565b60008051602061225e83398151915280546001600160a01b039586166001600160a01b0319918216179091557f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5f8054938616938216939093179092557f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a628054919094169116179091555050565b60008181527fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c836020526040812080546060929190610563906120da565b80601f016020809104026020016040519081016040528092919081815260200182805461058f906120da565b80156105dc5780601f106105b1576101008083540402835291602001916105dc565b820191906000526020600020905b8154815290600101906020018083116105bf57829003601f168201915b505050505090508051600014156106355760405162461bcd60e51b815260206004820152601d60248201527f455243313135355552493a20746f6b656e4964206e6f74206578697374000000604482015260640161031c565b604051610668907fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c84908390602001611dc5565b604051602081830303815290604052915050919050565b600061069b60008051602061225e8339815191525b6002015490565b905090565b6001600160a01b03811660009081527f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a616020526040812054610397565b6001600160a01b0385163314806106f957506106f98533610cbd565b6107155760405162461bcd60e51b815260040161031c90611fe4565b610723338686868686610d86565b5050505050565b6060815183511461078f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161031c565b825160008051602061227e8339815191529060009067ffffffffffffffff8111156107bc576107bc612189565b6040519080825280602002602001820160405280156107e5578160200160208202803683370190505b50905060005b85518110156109215760006001600160a01b031686828151811061081157610811612173565b60200260200101516001600160a01b0316141561088a5760405162461bcd60e51b815260206004820152603160248201527f455243313135353a2062617463682062616c616e636520717565727920666f7260448201527020746865207a65726f206164647265737360781b606482015260840161031c565b82600086838151811061089f5761089f612173565b6020026020010151815260200190815260200160002060008783815181106108c9576108c9612173565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061090457610904612173565b60209081029190910101528061091981612142565b9150506107eb565b50949350505050565b600080610935610daa565b90506000610942826106a0565b90506000878787848660405160200161095f959493929190611d7e565b604051602081830303815290604052905060006109da866109d484805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90610e00565b905060008051602061225e833981519152546001600160a01b03828116911614610a2b5760405162461bcd60e51b81526020600482015260026024820152614e4d60f01b604482015260640161031c565b610a4260008051602061225e833981519152610694565b9450610a4e858a610eb6565b7f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a60805460010190556001600160a01b03841660009081527f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a616020526040902080546001019055610ad88486610ac38a8c612096565b60405180602001604052806000815250610ef9565b7f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a6254604080516020810190915260008152610b2491869182916001600160a01b03169089908c90610f1a565b8785856001600160a01b03167f25b428dfde728ccfaddad7e29e4ac23c24ed7fd1a6e3e3f91894a9a073f5dfff60405160405180910390a4610b818460008051602061225e833981519152600101546001600160a01b0316610cbd565b610bbb577f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5f54610bbb906001600160a01b03166001610bc7565b50505050949350505050565b336001600160a01b0383161415610c325760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161031c565b3360008181527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6001600160a01b0391821660009081527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c6020908152604080832093909416825291909152205460ff1690565b6001600160a01b038516331480610d265750610d268533610cbd565b610d425760405162461bcd60e51b815260040161031c90611fe4565b610723338686868686610f1a565b8051610d82907fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c84906020840190611776565b5050565b610d94868686868686610f36565b610da28686868686866110aa565b505050505050565b600060183610801590610de657507fa5e014e253d3b66bd348c3cdd05f38b9805fff0b6471d004b58c6ada26cae993546001600160a01b031633145b15610df8575060131936013560601c90565b503390565b90565b600080600080845160411415610e2a5750505060208201516040830151606084015160001a610ea0565b845160401415610e585750505060408201516020830151906001600160ff1b0381169060ff1c601b01610ea0565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161031c565b610eac8682858561128a565b9695505050505050565b60008281527fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c83602090815260409091208251610ef492840190611776565b505050565b610f0833600086868686611433565b610f14848484846114fd565b50505050565b610f28868686868686611433565b610da286868686868661160c565b6001600160a01b0384163b15610da25760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610f7a9089908990889088908890600401611e63565b602060405180830381600087803b158015610f9457600080fd5b505af1925050508015610fc4575060408051601f3d908101601f19168201909252610fc191810190611bce565b60015b61107157610fd061219f565b806308c379a0141561100a5750610fe56121ba565b80610ff0575061100c565b8060405162461bcd60e51b815260040161031c9190611f3e565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161031c565b6001600160e01b0319811663bc197c8160e01b146110a15760405162461bcd60e51b815260040161031c90611f51565b50505050505050565b6001600160a01b0384166110d05760405162461bcd60e51b815260040161031c9061202d565b81518351146111325760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161031c565b60008051602061227e83398151915260005b845181101561122957600085828151811061116157611161612173565b60200260200101519050600085838151811061117f5761117f612173565b602090810291909101810151600084815286835260408082206001600160a01b038e1683529093529190912054909150818110156111cf5760405162461bcd60e51b815260040161031c90611f99565b6000838152602086815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061120c908490612096565b92505081905550505050808061122190612142565b915050611144565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611279929190611f19565b60405180910390a450505050505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156113075760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161031c565b8360ff16601b148061131c57508360ff16601c145b6113735760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161031c565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156113c7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661142a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161031c565b95945050505050565b6001600160a01b0384163b15610da25760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906114779089908990889088908890600401611ec1565b602060405180830381600087803b15801561149157600080fd5b505af19250505080156114c1575060408051601f3d908101601f191682019092526114be91810190611bce565b60015b6114cd57610fd061219f565b6001600160e01b0319811663f23a6e6160e01b146110a15760405162461bcd60e51b815260040161031c90611f51565b6001600160a01b03841661155d5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161031c565b6115763360008661156d8761172b565b6107238761172b565b600083815260008051602061227e833981519152602090815260408083206001600160a01b03881684529182905282208054919285926115b7908490612096565b909155505060408051858152602081018590526001600160a01b0387169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b0384166116325760405162461bcd60e51b815260040161031c9061202d565b61164186868661156d8761172b565b600083815260008051602061227e833981519152602081815260408084206001600160a01b038a16855290915290912054838110156116925760405162461bcd60e51b815260040161031c90611f99565b6000858152602083815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906116cf908490612096565b909155505060408051868152602081018690526001600160a01b03808916928a821692918c16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061176557611765612173565b602090810291909101015292915050565b828054611782906120da565b90600052602060002090601f0160209004810192826117a457600085556117ea565b82601f106117bd57805160ff19168380011785556117ea565b828001600101855582156117ea579182015b828111156117ea5782518255916020019190600101906117cf565b506117f69291506117fa565b5090565b5b808211156117f657600081556001016117fb565b80356001600160a01b038116811461182657600080fd5b919050565b600082601f83011261183c57600080fd5b8135602061184982612072565b6040516118568282612115565b8381528281019150858301600585901b8701840188101561187657600080fd5b60005b8581101561189557813584529284019290840190600101611879565b5090979650505050505050565b600082601f8301126118b357600080fd5b813567ffffffffffffffff8111156118cd576118cd612189565b6040516118e4601f8301601f191660200182612115565b8181528460208386010111156118f957600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561192857600080fd5b6119318261180f565b9392505050565b6000806040838503121561194b57600080fd5b6119548361180f565b91506119626020840161180f565b90509250929050565b600080600080600060a0868803121561198357600080fd5b61198c8661180f565b945061199a6020870161180f565b9350604086013567ffffffffffffffff808211156119b757600080fd5b6119c389838a0161182b565b945060608801359150808211156119d957600080fd5b6119e589838a0161182b565b935060808801359150808211156119fb57600080fd5b50611a08888289016118a2565b9150509295509295909350565b600080600080600060a08688031215611a2d57600080fd5b611a368661180f565b9450611a446020870161180f565b93506040860135925060608601359150608086013567ffffffffffffffff811115611a6e57600080fd5b611a08888289016118a2565b60008060408385031215611a8d57600080fd5b611a968361180f565b915060208301358015158114611aab57600080fd5b809150509250929050565b60008060408385031215611ac957600080fd5b611ad28361180f565b946020939093013593505050565b60008060408385031215611af357600080fd5b823567ffffffffffffffff80821115611b0b57600080fd5b818501915085601f830112611b1f57600080fd5b81356020611b2c82612072565b604051611b398282612115565b8381528281019150858301600585901b870184018b1015611b5957600080fd5b600096505b84871015611b8357611b6f8161180f565b835260019690960195918301918301611b5e565b5096505086013592505080821115611b9a57600080fd5b50611ba78582860161182b565b9150509250929050565b600060208284031215611bc357600080fd5b813561193181612244565b600060208284031215611be057600080fd5b815161193181612244565b600080600080600060a08688031215611c0357600080fd5b853567ffffffffffffffff811115611c1a57600080fd5b611c26888289016118a2565b955050611c356020870161180f565b9350611c436040870161180f565b9250611c516060870161180f565b9150611c5f6080870161180f565b90509295509295909350565b60008060008060808587031215611c8157600080fd5b843567ffffffffffffffff80821115611c9957600080fd5b611ca5888389016118a2565b955060208701359450604087013593506060870135915080821115611cc957600080fd5b50611cd6878288016118a2565b91505092959194509250565b600060208284031215611cf457600080fd5b5035919050565b600081518084526020808501945080840160005b83811015611d2b57815187529582019590820190600101611d0f565b509495945050505050565b60008151808452611d4e8160208601602086016120ae565b601f01601f19169290920160200192915050565b60008151611d748185602086016120ae565b9290920192915050565b60008651611d90818460208b016120ae565b919091019485525060208401929092526040830152606090811b6bffffffffffffffffffffffff191690820152607401919050565b600080845481600182811c915080831680611de157607f831692505b6020808410821415611e0157634e487b7160e01b86526022600452602486fd5b818015611e155760018114611e2657611e53565b60ff19861689528489019650611e53565b60008b81526020902060005b86811015611e4b5781548b820152908501908301611e32565b505084890196505b50505050505061142a8185611d62565b6001600160a01b0386811682528516602082015260a060408201819052600090611e8f90830186611cfb565b8281036060840152611ea18186611cfb565b90508281036080840152611eb58185611d36565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611efb90830184611d36565b979650505050505050565b6020815260006119316020830184611cfb565b604081526000611f2c6040830185611cfb565b828103602084015261142a8185611cfb565b6020815260006119316020830184611d36565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602b908201527f455243313135353a20696e73756666696369656e742062616c616e636573206660408201526a37b9103a3930b739b332b960a91b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b600067ffffffffffffffff82111561208c5761208c612189565b5060051b60200190565b600082198211156120a9576120a961215d565b500190565b60005b838110156120c95781810151838201526020016120b1565b83811115610f145750506000910152565b600181811c908216806120ee57607f821691505b6020821081141561210f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff8111828210171561213b5761213b612189565b6040525050565b60006000198214156121565761215661215d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115610dfd5760046000803e5060005160e01c90565b600060443d10156121c85790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156121f857505050505090565b82850191508151818111156122105750505050505090565b843d870101602082850101111561222a5750505050505090565b61223960208286010187612115565b509095945050505050565b6001600160e01b03198116811461225a57600080fd5b5056fe47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5e1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68ba2646970667358221220ec0795cb02e6b788fc779ad55e3513e61f31c5364bd4e038aac97c7ce2ca46e764736f6c63430008050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f45760003560e01c8063481c6a7511610097578063a22cb46511610066578063a22cb4651461024b578063bc01188e1461025e578063e985e9c51461028e578063f242432a146102a157600080fd5b8063481c6a75146101a55780634e1273f4146101d7578063572b6c05146101f75780637a15c41c1461023857600080fd5b80630e89341c116100d35780630e89341c1461015757806318160ddd146101775780631b0239471461017f5780632eb2c2d61461019257600080fd5b8062fdd58e146100f957806301ffc9a71461011f5780630b885ac314610142575b600080fd5b61010c610107366004611ab6565b6102b4565b6040519081526020015b60405180910390f35b61013261012d366004611bb1565b61035a565b6040519015158152602001610116565b610155610150366004611beb565b61039d565b005b61016a610165366004611ce2565b610526565b6040516101169190611f3e565b61010c61067f565b61010c61018d366004611916565b6106a0565b6101556101a036600461196b565b6106dd565b60008051602061225e833981519152546001600160a01b03165b6040516001600160a01b039091168152602001610116565b6101ea6101e5366004611ae0565b61072a565b6040516101169190611f06565b610132610205366004611916565b7fa5e014e253d3b66bd348c3cdd05f38b9805fff0b6471d004b58c6ada26cae993546001600160a01b0390811691161490565b61010c610246366004611c6b565b61092a565b610155610259366004611a7a565b610bc7565b7f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a62546001600160a01b03166101bf565b61013261029c366004611938565b610cbd565b6101556102af366004611a15565b610d0a565b60006001600160a01b0383166103255760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b60008051602061227e8339815191526000928352602090815260408084206001600160a01b0395909516845293905250205490565b6001600160e01b0319811660009081527f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e705602052604081205460ff165b92915050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031633146103fb5760405162461bcd60e51b81526020600482015260026024820152614e4f60f01b604482015260640161031c565b7fa5e014e253d3b66bd348c3cdd05f38b9805fff0b6471d004b58c6ada26cae99380546001600160a01b0319166001600160a01b038516179055636cdb3d1360e11b6000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f6020527f845f7f8d885943dffdc1524acbd9538b2923f93aad26d306df3b8982c7f0632d805460ff1916600117905561049985610d50565b60008051602061225e83398151915280546001600160a01b039586166001600160a01b0319918216179091557f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5f8054938616938216939093179092557f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a628054919094169116179091555050565b60008181527fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c836020526040812080546060929190610563906120da565b80601f016020809104026020016040519081016040528092919081815260200182805461058f906120da565b80156105dc5780601f106105b1576101008083540402835291602001916105dc565b820191906000526020600020905b8154815290600101906020018083116105bf57829003601f168201915b505050505090508051600014156106355760405162461bcd60e51b815260206004820152601d60248201527f455243313135355552493a20746f6b656e4964206e6f74206578697374000000604482015260640161031c565b604051610668907fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c84908390602001611dc5565b604051602081830303815290604052915050919050565b600061069b60008051602061225e8339815191525b6002015490565b905090565b6001600160a01b03811660009081527f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a616020526040812054610397565b6001600160a01b0385163314806106f957506106f98533610cbd565b6107155760405162461bcd60e51b815260040161031c90611fe4565b610723338686868686610d86565b5050505050565b6060815183511461078f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161031c565b825160008051602061227e8339815191529060009067ffffffffffffffff8111156107bc576107bc612189565b6040519080825280602002602001820160405280156107e5578160200160208202803683370190505b50905060005b85518110156109215760006001600160a01b031686828151811061081157610811612173565b60200260200101516001600160a01b0316141561088a5760405162461bcd60e51b815260206004820152603160248201527f455243313135353a2062617463682062616c616e636520717565727920666f7260448201527020746865207a65726f206164647265737360781b606482015260840161031c565b82600086838151811061089f5761089f612173565b6020026020010151815260200190815260200160002060008783815181106108c9576108c9612173565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061090457610904612173565b60209081029190910101528061091981612142565b9150506107eb565b50949350505050565b600080610935610daa565b90506000610942826106a0565b90506000878787848660405160200161095f959493929190611d7e565b604051602081830303815290604052905060006109da866109d484805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90610e00565b905060008051602061225e833981519152546001600160a01b03828116911614610a2b5760405162461bcd60e51b81526020600482015260026024820152614e4d60f01b604482015260640161031c565b610a4260008051602061225e833981519152610694565b9450610a4e858a610eb6565b7f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a60805460010190556001600160a01b03841660009081527f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a616020526040902080546001019055610ad88486610ac38a8c612096565b60405180602001604052806000815250610ef9565b7f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a6254604080516020810190915260008152610b2491869182916001600160a01b03169089908c90610f1a565b8785856001600160a01b03167f25b428dfde728ccfaddad7e29e4ac23c24ed7fd1a6e3e3f91894a9a073f5dfff60405160405180910390a4610b818460008051602061225e833981519152600101546001600160a01b0316610cbd565b610bbb577f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5f54610bbb906001600160a01b03166001610bc7565b50505050949350505050565b336001600160a01b0383161415610c325760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161031c565b3360008181527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6001600160a01b0391821660009081527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c6020908152604080832093909416825291909152205460ff1690565b6001600160a01b038516331480610d265750610d268533610cbd565b610d425760405162461bcd60e51b815260040161031c90611fe4565b610723338686868686610f1a565b8051610d82907fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c84906020840190611776565b5050565b610d94868686868686610f36565b610da28686868686866110aa565b505050505050565b600060183610801590610de657507fa5e014e253d3b66bd348c3cdd05f38b9805fff0b6471d004b58c6ada26cae993546001600160a01b031633145b15610df8575060131936013560601c90565b503390565b90565b600080600080845160411415610e2a5750505060208201516040830151606084015160001a610ea0565b845160401415610e585750505060408201516020830151906001600160ff1b0381169060ff1c601b01610ea0565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161031c565b610eac8682858561128a565b9695505050505050565b60008281527fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c83602090815260409091208251610ef492840190611776565b505050565b610f0833600086868686611433565b610f14848484846114fd565b50505050565b610f28868686868686611433565b610da286868686868661160c565b6001600160a01b0384163b15610da25760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610f7a9089908990889088908890600401611e63565b602060405180830381600087803b158015610f9457600080fd5b505af1925050508015610fc4575060408051601f3d908101601f19168201909252610fc191810190611bce565b60015b61107157610fd061219f565b806308c379a0141561100a5750610fe56121ba565b80610ff0575061100c565b8060405162461bcd60e51b815260040161031c9190611f3e565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161031c565b6001600160e01b0319811663bc197c8160e01b146110a15760405162461bcd60e51b815260040161031c90611f51565b50505050505050565b6001600160a01b0384166110d05760405162461bcd60e51b815260040161031c9061202d565b81518351146111325760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161031c565b60008051602061227e83398151915260005b845181101561122957600085828151811061116157611161612173565b60200260200101519050600085838151811061117f5761117f612173565b602090810291909101810151600084815286835260408082206001600160a01b038e1683529093529190912054909150818110156111cf5760405162461bcd60e51b815260040161031c90611f99565b6000838152602086815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061120c908490612096565b92505081905550505050808061122190612142565b915050611144565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611279929190611f19565b60405180910390a450505050505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156113075760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161031c565b8360ff16601b148061131c57508360ff16601c145b6113735760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161031c565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156113c7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661142a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161031c565b95945050505050565b6001600160a01b0384163b15610da25760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906114779089908990889088908890600401611ec1565b602060405180830381600087803b15801561149157600080fd5b505af19250505080156114c1575060408051601f3d908101601f191682019092526114be91810190611bce565b60015b6114cd57610fd061219f565b6001600160e01b0319811663f23a6e6160e01b146110a15760405162461bcd60e51b815260040161031c90611f51565b6001600160a01b03841661155d5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161031c565b6115763360008661156d8761172b565b6107238761172b565b600083815260008051602061227e833981519152602090815260408083206001600160a01b03881684529182905282208054919285926115b7908490612096565b909155505060408051858152602081018590526001600160a01b0387169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b0384166116325760405162461bcd60e51b815260040161031c9061202d565b61164186868661156d8761172b565b600083815260008051602061227e833981519152602081815260408084206001600160a01b038a16855290915290912054838110156116925760405162461bcd60e51b815260040161031c90611f99565b6000858152602083815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906116cf908490612096565b909155505060408051868152602081018690526001600160a01b03808916928a821692918c16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061176557611765612173565b602090810291909101015292915050565b828054611782906120da565b90600052602060002090601f0160209004810192826117a457600085556117ea565b82601f106117bd57805160ff19168380011785556117ea565b828001600101855582156117ea579182015b828111156117ea5782518255916020019190600101906117cf565b506117f69291506117fa565b5090565b5b808211156117f657600081556001016117fb565b80356001600160a01b038116811461182657600080fd5b919050565b600082601f83011261183c57600080fd5b8135602061184982612072565b6040516118568282612115565b8381528281019150858301600585901b8701840188101561187657600080fd5b60005b8581101561189557813584529284019290840190600101611879565b5090979650505050505050565b600082601f8301126118b357600080fd5b813567ffffffffffffffff8111156118cd576118cd612189565b6040516118e4601f8301601f191660200182612115565b8181528460208386010111156118f957600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561192857600080fd5b6119318261180f565b9392505050565b6000806040838503121561194b57600080fd5b6119548361180f565b91506119626020840161180f565b90509250929050565b600080600080600060a0868803121561198357600080fd5b61198c8661180f565b945061199a6020870161180f565b9350604086013567ffffffffffffffff808211156119b757600080fd5b6119c389838a0161182b565b945060608801359150808211156119d957600080fd5b6119e589838a0161182b565b935060808801359150808211156119fb57600080fd5b50611a08888289016118a2565b9150509295509295909350565b600080600080600060a08688031215611a2d57600080fd5b611a368661180f565b9450611a446020870161180f565b93506040860135925060608601359150608086013567ffffffffffffffff811115611a6e57600080fd5b611a08888289016118a2565b60008060408385031215611a8d57600080fd5b611a968361180f565b915060208301358015158114611aab57600080fd5b809150509250929050565b60008060408385031215611ac957600080fd5b611ad28361180f565b946020939093013593505050565b60008060408385031215611af357600080fd5b823567ffffffffffffffff80821115611b0b57600080fd5b818501915085601f830112611b1f57600080fd5b81356020611b2c82612072565b604051611b398282612115565b8381528281019150858301600585901b870184018b1015611b5957600080fd5b600096505b84871015611b8357611b6f8161180f565b835260019690960195918301918301611b5e565b5096505086013592505080821115611b9a57600080fd5b50611ba78582860161182b565b9150509250929050565b600060208284031215611bc357600080fd5b813561193181612244565b600060208284031215611be057600080fd5b815161193181612244565b600080600080600060a08688031215611c0357600080fd5b853567ffffffffffffffff811115611c1a57600080fd5b611c26888289016118a2565b955050611c356020870161180f565b9350611c436040870161180f565b9250611c516060870161180f565b9150611c5f6080870161180f565b90509295509295909350565b60008060008060808587031215611c8157600080fd5b843567ffffffffffffffff80821115611c9957600080fd5b611ca5888389016118a2565b955060208701359450604087013593506060870135915080821115611cc957600080fd5b50611cd6878288016118a2565b91505092959194509250565b600060208284031215611cf457600080fd5b5035919050565b600081518084526020808501945080840160005b83811015611d2b57815187529582019590820190600101611d0f565b509495945050505050565b60008151808452611d4e8160208601602086016120ae565b601f01601f19169290920160200192915050565b60008151611d748185602086016120ae565b9290920192915050565b60008651611d90818460208b016120ae565b919091019485525060208401929092526040830152606090811b6bffffffffffffffffffffffff191690820152607401919050565b600080845481600182811c915080831680611de157607f831692505b6020808410821415611e0157634e487b7160e01b86526022600452602486fd5b818015611e155760018114611e2657611e53565b60ff19861689528489019650611e53565b60008b81526020902060005b86811015611e4b5781548b820152908501908301611e32565b505084890196505b50505050505061142a8185611d62565b6001600160a01b0386811682528516602082015260a060408201819052600090611e8f90830186611cfb565b8281036060840152611ea18186611cfb565b90508281036080840152611eb58185611d36565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611efb90830184611d36565b979650505050505050565b6020815260006119316020830184611cfb565b604081526000611f2c6040830185611cfb565b828103602084015261142a8185611cfb565b6020815260006119316020830184611d36565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602b908201527f455243313135353a20696e73756666696369656e742062616c616e636573206660408201526a37b9103a3930b739b332b960a91b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b600067ffffffffffffffff82111561208c5761208c612189565b5060051b60200190565b600082198211156120a9576120a961215d565b500190565b60005b838110156120c95781810151838201526020016120b1565b83811115610f145750506000910152565b600181811c908216806120ee57607f821691505b6020821081141561210f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff8111828210171561213b5761213b612189565b6040525050565b60006000198214156121565761215661215d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115610dfd5760046000803e5060005160e01c90565b600060443d10156121c85790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156121f857505050505090565b82850191508151818111156122105750505050505090565b843d870101602082850101111561222a5750505050505090565b61223960208286010187612115565b509095945050505050565b6001600160e01b03198116811461225a57600080fd5b5056fe47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5e1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68ba2646970667358221220ec0795cb02e6b788fc779ad55e3513e61f31c5364bd4e038aac97c7ce2ca46e764736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "account": "address to query",
          "id": "token to query"
        },
        "returns": {
          "_0": "token balance"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "accounts": "addresss to query",
          "ids": "tokens to query"
        },
        "returns": {
          "_0": "token balances"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "amounts": "list of quantities of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "ids": "list of token IDs",
          "to": "receiver of tokens"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "amount": "quantity of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "id": "token ID",
          "to": "receiver of tokens"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address whose approval status to update",
          "status": "whether operator should be considered approved"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": "query the balance of given token held by given address"
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "query the balances of given tokens held by given addresses"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given operator to spend held tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
