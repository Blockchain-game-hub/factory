{
  "address": "0x08E7C97f47d56Cbf06b1124605c942Ae21D64119",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "DestinationMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "accountsByToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timeStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stepDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_shareCyber",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "createDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDrop",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timeStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stepDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shareCyber",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minted",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibDropStorage.Drop",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timeStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stepDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shareCyber",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minted",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibDropStorage.Drop",
          "name": "drop",
          "type": "tuple"
        }
      ],
      "name": "getMintPriceForDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getMintPriceForToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeSpent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stepDuration",
          "type": "uint256"
        }
      ],
      "name": "getPriceFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_opensea",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oncyber",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "minterNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oncyber",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "tokensByAccount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalHolders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x068a5fb53296c7c673f37f5f3083f65274f8269e653f303cad1dc8731d750b43",
  "receipt": {
    "to": null,
    "from": "0x0Cd57430BD423eb99DAc0D041E362f7BfF736318",
    "contractAddress": "0x08E7C97f47d56Cbf06b1124605c942Ae21D64119",
    "transactionIndex": 24,
    "gasUsed": "5193023",
    "logsBloom": "0x
    "blockHash": "0xdf14b552c9d428b46dd5d2fb65c26bcf55e95e83cea9f0c9a8f835e479bdc7d3",
    "transactionHash": "0x068a5fb53296c7c673f37f5f3083f65274f8269e653f303cad1dc8731d750b43",
    "logs": [],
    "blockNumber": 9601992,
    "cumulativeGasUsed": "8908638",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "40e68682467def147cab76d9a924a213",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DestinationMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"accountsByToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stepDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shareCyber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"createDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDrop\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stepDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareCyber\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"internalType\":\"struct LibDropStorage.Drop\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stepDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareCyber\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"internalType\":\"struct LibDropStorage.Drop\",\"name\":\"drop\",\"type\":\"tuple\"}],\"name\":\"getMintPriceForDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getMintPriceForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeSpent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stepDuration\",\"type\":\"uint256\"}],\"name\":\"getPriceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_opensea\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oncyber\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"minterNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oncyber\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"tokensByAccount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accountsByToken(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"list of holder addresses\"}},\"balanceOf(address,uint256)\":{\"params\":{\"account\":\"address to query\",\"id\":\"token to query\"},\"returns\":{\"_0\":\"token balance\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"accounts\":\"addresss to query\",\"ids\":\"tokens to query\"},\"returns\":{\"_0\":\"token balances\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"list of quantities of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"ids\":\"list of token IDs\",\"to\":\"receiver of tokens\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"amount\":\"quantity of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"id\":\"token ID\",\"to\":\"receiver of tokens\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address whose approval status to update\",\"status\":\"whether operator should be considered approved\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"tokensByAccount(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"list of token ids\"}},\"totalHolders(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"quantity of holders\"}},\"totalSupply(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"token supply\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accountsByToken(uint256)\":{\"notice\":\"query holders of given token\"},\"balanceOf(address,uint256)\":{\"notice\":\"query the balance of given token held by given address\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"query the balances of given tokens held by given addresses\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given operator to spend held tokens\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"tokensByAccount(address)\":{\"notice\":\"query tokens held by given address\"},\"totalHolders(uint256)\":{\"notice\":\"query total number of holders for given token\"},\"totalSupply(uint256)\":{\"notice\":\"query total minted supply of given token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DestinationUtility/CyberDestinationUtilityFactoryFacet.sol\":\"CyberDestinationUtilityFactoryFacet\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { ERC165Storage } from './ERC165Storage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165 is IERC165 {\\n    using ERC165Storage for ERC165Storage.Layout;\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return ERC165Storage.layout().isSupportedInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xc4a0b280ce381af99e8be8d7fb59f3c71690230d12d07c7beffe5594ceac7cf7\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC165Storage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        require(interfaceId != 0xffffffff, 'ERC165: invalid interface id');\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x61f281af116b703f31c0fdd8616cab9c5ad71f7d5d0038b60ec1512587b2f91d\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x19d0bf328e3ea589cd4fa37a487cc33aa7ac293656e11a268f46161470b111c6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ERC165 } from '../../introspection/ERC165.sol';\\nimport { ERC1155Base, ERC1155BaseInternal } from './base/ERC1155Base.sol';\\nimport { ERC1155Enumerable } from './enumerable/ERC1155Enumerable.sol';\\nimport { ERC1155Metadata } from './metadata/ERC1155Metadata.sol';\\n\\n/**\\n * @title SolidState ERC1155 implementation\\n */\\nabstract contract ERC1155 is\\n    ERC1155Base,\\n    ERC1155Enumerable,\\n    ERC1155Metadata,\\n    ERC165\\n{\\n    /**\\n     * @inheritdoc ERC1155BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155BaseInternal, ERC1155Enumerable) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xa71dcd8a1f1a488db7e1cbf073bb0bcd2a5a24af061043f3b9284481d99056d8\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8f5d42093f86830f6e7d2a8875eac8c2d7ff064859c13f9ffe237e4ccc2951c4\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x770e5cbe555d00fb78405e2d8c74ec6cdc9b84dcb5f73f4efa2cdc20cf57e026\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @notice validate receipt of ERC1155 transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param id token ID received\\n     * @param value quantity of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice validate receipt of ERC1155 batch transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param ids token IDs received\\n     * @param values quantities of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x31fcdbc3c885a95d0449d9b5f20a7ef0cae2fa63bd82195995d05a7eecaa5f74\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155 } from '../IERC1155.sol';\\nimport { IERC1155Receiver } from '../IERC1155Receiver.sol';\\nimport { ERC1155BaseInternal, ERC1155BaseStorage } from './ERC1155BaseInternal.sol';\\n\\n/**\\n * @title Base ERC1155 contract\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155Base is IERC1155, ERC1155BaseInternal {\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOf(address account, uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balanceOf(account, id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(\\n            accounts.length == ids.length,\\n            'ERC1155: accounts and ids length mismatch'\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        unchecked {\\n            for (uint256 i; i < accounts.length; i++) {\\n                require(\\n                    accounts[i] != address(0),\\n                    'ERC1155: batch balance query for the zero address'\\n                );\\n                batchBalances[i] = balances[ids[i]][accounts[i]];\\n            }\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return ERC1155BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function setApprovalForAll(address operator, bool status)\\n        public\\n        virtual\\n        override\\n    {\\n        require(\\n            msg.sender != operator,\\n            'ERC1155: setting approval status for self'\\n        );\\n        ERC1155BaseStorage.layout().operatorApprovals[msg.sender][\\n            operator\\n        ] = status;\\n        emit ApprovalForAll(msg.sender, operator, status);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            'ERC1155: caller is not owner nor approved'\\n        );\\n        _safeTransfer(msg.sender, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            'ERC1155: caller is not owner nor approved'\\n        );\\n        _safeTransferBatch(msg.sender, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xe2e044ac6fc81e938ae06bea0350352472c8a77ff29ac09263d268c6610f9b00\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC1155Internal } from '../IERC1155Internal.sol';\\nimport { IERC1155Receiver } from '../IERC1155Receiver.sol';\\nimport { ERC1155BaseStorage } from './ERC1155BaseStorage.sol';\\n\\n/**\\n * @title Base ERC1155 internal functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155BaseInternal is IERC1155Internal {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function _balanceOf(address account, uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        require(\\n            account != address(0),\\n            'ERC1155: balance query for the zero address'\\n        );\\n        return ERC1155BaseStorage.layout().balances[id][account];\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: mint to the zero address');\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            address(0),\\n            account,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        mapping(address => uint256) storage balances = ERC1155BaseStorage\\n            .layout()\\n            .balances[id];\\n        balances[account] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), account, id, amount);\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _doSafeTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            account,\\n            id,\\n            amount,\\n            data\\n        );\\n        _mint(account, id, amount, data);\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: mint to the zero address');\\n        require(\\n            ids.length == amounts.length,\\n            'ERC1155: ids and amounts length mismatch'\\n        );\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            address(0),\\n            account,\\n            ids,\\n            amounts,\\n            data\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; i++) {\\n            balances[ids[i]][account] += amounts[i];\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), account, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _doSafeBatchTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            account,\\n            ids,\\n            amounts,\\n            data\\n        );\\n        _mintBatch(account, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @notice burn given quantity of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param id token ID\\n     * @param amount quantity of tokens to burn\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: burn from the zero address');\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            account,\\n            address(0),\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            ''\\n        );\\n\\n        mapping(address => uint256) storage balances = ERC1155BaseStorage\\n            .layout()\\n            .balances[id];\\n\\n        unchecked {\\n            require(\\n                balances[account] >= amount,\\n                'ERC1155: burn amount exceeds balances'\\n            );\\n            balances[account] -= amount;\\n        }\\n\\n        emit TransferSingle(msg.sender, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @notice burn given batch of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to burn\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: burn from the zero address');\\n        require(\\n            ids.length == amounts.length,\\n            'ERC1155: ids and amounts length mismatch'\\n        );\\n\\n        _beforeTokenTransfer(msg.sender, account, address(0), ids, amounts, '');\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            for (uint256 i; i < ids.length; i++) {\\n                uint256 id = ids[i];\\n                require(\\n                    balances[id][account] >= amounts[i],\\n                    'ERC1155: burn amount exceeds balance'\\n                );\\n                balances[id][account] -= amounts[i];\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            recipient != address(0),\\n            'ERC1155: transfer to the zero address'\\n        );\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            sender,\\n            recipient,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            uint256 senderBalance = balances[id][sender];\\n            require(\\n                senderBalance >= amount,\\n                'ERC1155: insufficient balances for transfer'\\n            );\\n            balances[id][sender] = senderBalance - amount;\\n        }\\n\\n        balances[id][recipient] += amount;\\n\\n        emit TransferSingle(operator, sender, recipient, id, amount);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _doSafeTransferAcceptanceCheck(\\n            operator,\\n            sender,\\n            recipient,\\n            id,\\n            amount,\\n            data\\n        );\\n        _transfer(operator, sender, recipient, id, amount, data);\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            recipient != address(0),\\n            'ERC1155: transfer to the zero address'\\n        );\\n        require(\\n            ids.length == amounts.length,\\n            'ERC1155: ids and amounts length mismatch'\\n        );\\n\\n        _beforeTokenTransfer(operator, sender, recipient, ids, amounts, data);\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; i++) {\\n            uint256 token = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            unchecked {\\n                uint256 senderBalance = balances[token][sender];\\n                require(\\n                    senderBalance >= amount,\\n                    'ERC1155: insufficient balances for transfer'\\n                );\\n                balances[token][sender] = senderBalance - amount;\\n            }\\n\\n            balances[token][recipient] += amount;\\n        }\\n\\n        emit TransferBatch(operator, sender, recipient, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            sender,\\n            recipient,\\n            ids,\\n            amounts,\\n            data\\n        );\\n        _transferBatch(operator, sender, recipient, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @notice wrap given element in array of length 1\\n     * @param element element to wrap\\n     * @return singleton array\\n     */\\n    function _asSingletonArray(uint256 element)\\n        private\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n        return array;\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155Received(\\n                    operator,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                require(\\n                    response == IERC1155Receiver.onERC1155Received.selector,\\n                    'ERC1155: ERC1155Receiver rejected tokens'\\n                );\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155BatchReceived(\\n                    operator,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                require(\\n                    response ==\\n                        IERC1155Receiver.onERC1155BatchReceived.selector,\\n                    'ERC1155: ERC1155Receiver rejected tokens'\\n                );\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @dev called for both single and batch transfers\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xc810957aa737943338b815e4a45000f602badff5491a81f557e1f741cb966e5a\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC1155BaseStorage {\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8db92a910e779b41952ea8c28ee143ccdf6d4bc43b0ca984ceda9ef67956493d\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\nimport { ERC1155Base, ERC1155BaseInternal } from '../base/ERC1155Base.sol';\\nimport { IERC1155Enumerable } from './IERC1155Enumerable.sol';\\nimport { ERC1155EnumerableInternal, ERC1155EnumerableStorage } from './ERC1155EnumerableInternal.sol';\\n\\n/**\\n * @title ERC1155 implementation including enumerable and aggregate functions\\n */\\nabstract contract ERC1155Enumerable is\\n    IERC1155Enumerable,\\n    ERC1155Base,\\n    ERC1155EnumerableInternal\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function totalSupply(uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return ERC1155EnumerableStorage.layout().totalSupply[id];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function totalHolders(uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return ERC1155EnumerableStorage.layout().accountsByToken[id].length();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function accountsByToken(uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address[] memory)\\n    {\\n        EnumerableSet.AddressSet storage accounts = ERC1155EnumerableStorage\\n            .layout()\\n            .accountsByToken[id];\\n\\n        address[] memory addresses = new address[](accounts.length());\\n\\n        for (uint256 i; i < accounts.length(); i++) {\\n            addresses[i] = accounts.at(i);\\n        }\\n\\n        return addresses;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function tokensByAccount(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        EnumerableSet.UintSet storage tokens = ERC1155EnumerableStorage\\n            .layout()\\n            .tokensByAccount[account];\\n\\n        uint256[] memory ids = new uint256[](tokens.length());\\n\\n        for (uint256 i; i < tokens.length(); i++) {\\n            ids[i] = tokens.at(i);\\n        }\\n\\n        return ids;\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook: update aggregate values\\n     * @inheritdoc ERC1155EnumerableInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override(ERC1155BaseInternal, ERC1155EnumerableInternal)\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xcb9cfd2b1663c96f6eada653fb403b27362a8fe23e5f8eaf4c8ffd6c9e4a446e\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\nimport { ERC1155BaseInternal, ERC1155BaseStorage } from '../base/ERC1155BaseInternal.sol';\\nimport { ERC1155EnumerableStorage } from './ERC1155EnumerableStorage.sol';\\n\\n/**\\n * @title ERC1155Enumerable internal functions\\n */\\nabstract contract ERC1155EnumerableInternal is ERC1155BaseInternal {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @notice ERC1155 hook: update aggregate values\\n     * @inheritdoc ERC1155BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from != to) {\\n            ERC1155EnumerableStorage.Layout storage l = ERC1155EnumerableStorage\\n                .layout();\\n            mapping(uint256 => EnumerableSet.AddressSet)\\n                storage tokenAccounts = l.accountsByToken;\\n            EnumerableSet.UintSet storage fromTokens = l.tokensByAccount[from];\\n            EnumerableSet.UintSet storage toTokens = l.tokensByAccount[to];\\n\\n            for (uint256 i; i < ids.length; i++) {\\n                uint256 amount = amounts[i];\\n\\n                if (amount > 0) {\\n                    uint256 id = ids[i];\\n\\n                    if (from == address(0)) {\\n                        l.totalSupply[id] += amount;\\n                    } else if (_balanceOf(from, id) == amount) {\\n                        tokenAccounts[id].remove(from);\\n                        fromTokens.remove(id);\\n                    }\\n\\n                    if (to == address(0)) {\\n                        l.totalSupply[id] -= amount;\\n                    } else if (_balanceOf(to, id) == 0) {\\n                        tokenAccounts[id].add(to);\\n                        toTokens.add(id);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ff538c74c04001dadf6fe1b4d8d1f028d09f75edb52b1f21dd0c2aff688ba45\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\n\\nlibrary ERC1155EnumerableStorage {\\n    struct Layout {\\n        mapping(uint256 => uint256) totalSupply;\\n        mapping(uint256 => EnumerableSet.AddressSet) accountsByToken;\\n        mapping(address => EnumerableSet.UintSet) tokensByAccount;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Enumerable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x33c415a72189dd74fcccf1a3737ed6a6991edb4ec410952adef1410a22bce57a\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/IERC1155Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC1155 enumerable and aggregate function interface\\n */\\ninterface IERC1155Enumerable {\\n    /**\\n     * @notice query total minted supply of given token\\n     * @param id token id to query\\n     * @return token supply\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @notice query total number of holders for given token\\n     * @param id token id to query\\n     * @return quantity of holders\\n     */\\n    function totalHolders(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @notice query holders of given token\\n     * @param id token id to query\\n     * @return list of holder addresses\\n     */\\n    function accountsByToken(uint256 id)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /**\\n     * @notice query tokens held by given address\\n     * @param account address to query\\n     * @return list of token ids\\n     */\\n    function tokensByAccount(address account)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xbef598a8755a36981932f7cf4ada1d25890971ab7144a117c0ed88cab0511e04\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { UintUtils } from '../../../utils/UintUtils.sol';\\nimport { IERC1155Metadata } from './IERC1155Metadata.sol';\\nimport { ERC1155MetadataInternal } from './ERC1155MetadataInternal.sol';\\nimport { ERC1155MetadataStorage } from './ERC1155MetadataStorage.sol';\\n\\n/**\\n * @notice ERC1155 metadata extensions\\n */\\nabstract contract ERC1155Metadata is IERC1155Metadata, ERC1155MetadataInternal {\\n    using UintUtils for uint256;\\n\\n    /**\\n     * @notice inheritdoc IERC1155Metadata\\n     */\\n    function uri(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        ERC1155MetadataStorage.Layout storage l = ERC1155MetadataStorage\\n            .layout();\\n\\n        string memory tokenIdURI = l.tokenURIs[tokenId];\\n        string memory baseURI = l.baseURI;\\n\\n        if (bytes(baseURI).length == 0) {\\n            return tokenIdURI;\\n        } else if (bytes(tokenIdURI).length > 0) {\\n            return string(abi.encodePacked(baseURI, tokenIdURI));\\n        } else {\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6322c9474aa916850b855eb9bce0e56e85705740e78b9e9028fccca907d235bb\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155MetadataInternal } from './IERC1155MetadataInternal.sol';\\nimport { ERC1155MetadataStorage } from './ERC1155MetadataStorage.sol';\\n\\n/**\\n * @notice ERC1155Metadata internal functions\\n */\\nabstract contract ERC1155MetadataInternal is IERC1155MetadataInternal {\\n    /**\\n     * @notice set base metadata URI\\n     * @dev base URI is a non-standard feature adapted from the ERC721 specification\\n     * @param baseURI base URI\\n     */\\n    function _setBaseURI(string memory baseURI) internal {\\n        ERC1155MetadataStorage.layout().baseURI = baseURI;\\n    }\\n\\n    /**\\n     * @notice set per-token metadata URI\\n     * @param tokenId token whose metadata URI to set\\n     * @param tokenURI per-token URI\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory tokenURI) internal {\\n        ERC1155MetadataStorage.layout().tokenURIs[tokenId] = tokenURI;\\n        emit URI(tokenURI, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x922b91abc8972541855e56fd93468ee9f0178a68551c6b4ece6df639accf6d68\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice ERC1155 metadata extensions\\n */\\nlibrary ERC1155MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Metadata');\\n\\n    struct Layout {\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb01fdd26dbaf6423ff6b208fd58cfefd84dbaf9a0bebcd64f3ff7467e691c6a\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/IERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC1155Metadata interface\\n */\\ninterface IERC1155Metadata {\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function uri(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xf0fcc6093a6eb3c0254814f365cc11cb5ec8e7b66493d52a02d9892de2fc198c\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/IERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial ERC1155Metadata interface needed by internal functions\\n */\\ninterface IERC1155MetadataInternal {\\n    event URI(string value, uint256 indexed tokenId);\\n}\\n\",\"keccak256\":\"0xe379314dbf1cfb48fc693a904e845a56d88056376b571a52f5a54a14a390c475\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressUtils {\\n    function toString(address account) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(account)));\\n        bytes memory alphabet = '0123456789abcdef';\\n        bytes memory chars = new bytes(42);\\n\\n        chars[0] = '0';\\n        chars[1] = 'x';\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            chars[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            chars[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n\\n        return string(chars);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        require(success, 'AddressUtils: failed to send value');\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            'AddressUtils: insufficient balance for call'\\n        );\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        require(\\n            isContract(target),\\n            'AddressUtils: function call to non-contract'\\n        );\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x427b64d138edb39914556505367376c7d5ad00ecca42db79dca8276404393e0b\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            set._values.length > index,\\n            'EnumerableSet: index out of bounds'\\n        );\\n        return set._values[index];\\n    }\\n\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            uint256 index = valueIndex - 1;\\n            bytes32 last = set._values[set._values.length - 1];\\n\\n            // move last value to now-vacant index\\n\\n            set._values[index] = last;\\n            set._indexes[last] = index + 1;\\n\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x42e1b641451347b1f3b7dc523fbea5c50e99793f56e3d7b11561fb56f00bc432\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary UintUtils {\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x58c2a621bfa49d032bee277f6f1803b95567cb42178e33d3c0e0a04066991b62\",\"license\":\"MIT\"},\"contracts/BaseRelayRecipient/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport './BaseRelayRecipientStorage.sol';\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\n\\nabstract contract BaseRelayRecipient is Context {\\n  /*\\n   * require a function to be called through GSN only\\n   */\\n  //  modifier trustedForwarderOnly() {\\n  //    require(msg.sender == address(s.trustedForwarder), \\\"Function can only be called through the trusted Forwarder\\\");\\n  //    _;\\n  //  }\\n\\n  function isTrustedForwarder(address forwarder) public view returns (bool) {\\n    return forwarder == BaseRelayRecipientStorage.layout().trustedForwarder;\\n  }\\n\\n  /**\\n   * return the sender of this call.\\n   * if the call came through our trusted forwarder, return the original sender.\\n   * otherwise, return `msg.sender`.\\n   * should be used in the contract anywhere instead of msg.sender\\n   */\\n  function _msgSender() internal view virtual override returns (address ret) {\\n    if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n      // At this point we know that the sender is a trusted forwarder,\\n      // so we trust that the last bytes of msg.data are the verified sender address.\\n      // extract sender address from the end of msg.data\\n      assembly {\\n        ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n      }\\n    } else {\\n      return msg.sender;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9a115d5a38f1736963227e5533b43b8e94952ac3168eacbe67fdbe2bdd19b70c\",\"license\":\"MIT\"},\"contracts/BaseRelayRecipient/BaseRelayRecipientStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary BaseRelayRecipientStorage {\\n  bytes32 internal constant STORAGE_SLOT =\\n    keccak256('diamond.storage.BaseRelayRecipientStorage');\\n\\n  struct Layout {\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address trustedForwarder;\\n  }\\n\\n  function layout() internal pure returns (Layout storage layout) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly {\\n      layout.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8bea5fb0d35848f9b14d2fb2c0f08a12053f053c88f4bc1a14b374192cdc2e12\",\"license\":\"MIT\"},\"contracts/CyberDestinationFactoryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n//\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport '@solidstate/contracts/token/ERC1155/IERC1155.sol';\\nimport './BaseRelayRecipient/BaseRelayRecipient.sol';\\nimport './BaseRelayRecipient/BaseRelayRecipientStorage.sol';\\nimport './Diamond/LibDiamond.sol';\\nimport './ERC1155URI/ERC1155URI.sol';\\n\\nimport './libraries/LibAppStorage.sol';\\n\\ncontract CyberDestinationFactoryBase is BaseRelayRecipient, ERC1155URI {\\n  using ECDSA for bytes32;\\n  using Counters for Counters.Counter;\\n\\n  event Minted(\\n    address indexed account,\\n    uint256 indexed tokenId,\\n    uint256 indexed amount\\n  );\\n\\n  function initialize(\\n    string memory _uri,\\n    address _manager,\\n    address _trustedForwarder,\\n    address _opensea,\\n    address _oncyber\\n  ) public virtual {\\n    require(LibDiamond.diamondStorage().contractOwner == msg.sender, 'NO');\\n\\n    BaseRelayRecipientStorage.layout().trustedForwarder = _trustedForwarder;\\n    LibDiamond.diamondStorage().supportedInterfaces[\\n      type(IERC1155).interfaceId\\n    ] = true;\\n    setURI(_uri);\\n    LibAppStorage.layout().manager = _manager;\\n    LibAppStorage.layout().opensea = _opensea;\\n    LibAppStorage.layout().oncyber = _oncyber;\\n  }\\n\\n  function totalSupply() public view returns (uint256) {\\n    return LibAppStorage.layout().totalSupply.current();\\n  }\\n\\n  function manager() public view returns (address) {\\n    return LibAppStorage.layout().manager;\\n  }\\n\\n  function oncyber() public view returns (address) {\\n    return LibAppStorage.layout().oncyber;\\n  }\\n\\n  function minterNonce(address _minter) public view returns (uint256) {\\n    return LibAppStorage.layout().minterNonce[_minter].current();\\n  }\\n}\\n\",\"keccak256\":\"0x14c90ba149dbc3d3c312cafb8c133e34740d5b18a2524a2cfbc0cbd864f85a67\",\"license\":\"MIT\"},\"contracts/CyberDropBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n//\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\n\\nimport './libraries/LibAppStorage.sol';\\nimport './libraries/LibDropStorage.sol';\\nimport './CyberDestinationFactoryBase.sol';\\n\\ncontract CyberDropBase is CyberDestinationFactoryBase {\\n  using ECDSA for bytes32;\\n  using Counters for Counters.Counter;\\n\\n  event DestinationMinted(address indexed account, uint256 indexed tokenId);\\n\\n  function getDrop(uint256 _tokenId)\\n    public\\n    view\\n    returns (LibDropStorage.Drop memory)\\n  {\\n    LibDropStorage.Drop memory drop = LibDropStorage.layout().drops[_tokenId];\\n    require(drop.timeStart != 0, 'DNE');\\n\\n    return drop;\\n  }\\n\\n  function createDrop(\\n    string memory _uri,\\n    uint256 _timeStart,\\n    uint256 _timeEnd,\\n    uint256 _priceStart,\\n    uint256 _priceEnd,\\n    uint256 _stepDuration,\\n    uint256 _amountCap,\\n    uint256 _shareCyber,\\n    bytes memory _signature\\n  ) public returns (uint256 _tokenId) {\\n    require(_timeEnd > _timeStart, 'IT');\\n    require(_timeEnd - _timeStart > _stepDuration, 'IS');\\n    require(_priceStart > _priceEnd, 'IP');\\n    require(_shareCyber <= 100, 'ISO');\\n\\n    address sender = _msgSender();\\n    uint256 nonce = minterNonce(sender);\\n    bytes memory _message = abi.encodePacked(\\n      _uri,\\n      _timeStart,\\n      _timeEnd,\\n      _priceStart,\\n      _priceEnd,\\n      _stepDuration,\\n      _amountCap,\\n      _shareCyber,\\n      sender,\\n      nonce\\n    );\\n    address recoveredAddress = keccak256(_message)\\n      .toEthSignedMessageHash()\\n      .recover(_signature);\\n    require(recoveredAddress == LibAppStorage.layout().manager, 'NM');\\n\\n    // Mint token\\n    _tokenId = LibAppStorage.layout().totalSupply.current();\\n    setTokenURI(_tokenId, _uri);\\n    LibAppStorage.layout().totalSupply.increment();\\n    LibAppStorage.layout().minterNonce[sender].increment();\\n    LibDropStorage.Drop memory drop = LibDropStorage.Drop({\\n      timeStart: _timeStart,\\n      timeEnd: _timeEnd,\\n      priceStart: _priceStart,\\n      priceEnd: _priceEnd,\\n      stepDuration: _stepDuration,\\n      amountCap: _amountCap,\\n      shareCyber: _shareCyber,\\n      creator: payable(sender),\\n      minted: 0\\n    });\\n    LibDropStorage.layout().drops[_tokenId] = drop;\\n\\n    emit DestinationMinted(sender, _tokenId);\\n\\n    return _tokenId;\\n  }\\n\\n  function mint(uint256 _tokenId) public payable returns (bool) {\\n    address sender = _msgSender();\\n    LibDropStorage.Drop storage drop = LibDropStorage.layout().drops[_tokenId];\\n\\n    require(\\n      block.timestamp > drop.timeStart && block.timestamp <= drop.timeEnd,\\n      'OOT'\\n    );\\n\\n    if (drop.amountCap != 0) {\\n      require(drop.minted < drop.amountCap, 'CR');\\n    }\\n\\n    uint256 price = getMintPriceForDrop(drop);\\n    require(msg.value >= price, 'IA');\\n\\n    _safeMint(sender, _tokenId, 1, '');\\n    drop.minted += 1;\\n    emit Minted(sender, _tokenId, 1);\\n\\n    uint256 amountOnCyber = (msg.value * drop.shareCyber) / 100;\\n    uint256 amountCreator = msg.value - amountOnCyber;\\n\\n    drop.creator.transfer(amountCreator);\\n    payable(LibAppStorage.layout().oncyber).transfer(amountOnCyber);\\n    return true;\\n  }\\n\\n  function getMintPriceForToken(uint256 _tokenId)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    LibDropStorage.Drop storage drop = LibDropStorage.layout().drops[_tokenId];\\n\\n    require(\\n      block.timestamp > drop.timeStart && block.timestamp <= drop.timeEnd,\\n      'OOT'\\n    );\\n    if (drop.amountCap != 0) {\\n      require(drop.minted < drop.amountCap, 'CR');\\n    }\\n    return getMintPriceForDrop(drop);\\n  }\\n\\n  function getMintPriceForDrop(LibDropStorage.Drop memory drop)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    uint256 timeSpent = block.timestamp - drop.timeStart;\\n    uint256 duration = drop.timeEnd - drop.timeStart;\\n    return\\n      getPriceFor(\\n        timeSpent,\\n        duration,\\n        drop.priceStart,\\n        drop.priceEnd,\\n        drop.stepDuration\\n      );\\n  }\\n\\n  function getPriceFor(\\n    uint256 _timeSpent,\\n    uint256 _duration,\\n    uint256 _priceStart,\\n    uint256 _priceEnd,\\n    uint256 _stepDuration\\n  ) public pure returns (uint256) {\\n    // https://www.desmos.com/calculator/oajpdvew5q\\n    // f\\\\left(x\\\\right)=\\\\frac{s\\\\ \\\\cdot d\\\\ +\\\\ \\\\operatorname{mod}\\\\left(x,\\\\ g\\\\right)\\\\ \\\\cdot\\\\ \\\\left(s\\\\ -\\\\ l\\\\right)\\\\ -\\\\ x\\\\ \\\\cdot\\\\ \\\\left(s\\\\ -\\\\ l\\\\right)\\\\ \\\\ }{d}\\n    // (s * d + (x % g) * (s - l) - x * (s - l) / d\\n    return\\n      (_duration *\\n        _priceStart +\\n        (_timeSpent % _stepDuration) *\\n        (_priceStart - _priceEnd) -\\n        _timeSpent *\\n        (_priceStart - _priceEnd)) / _duration;\\n  }\\n}\\n\",\"keccak256\":\"0x74028cf5d963fe1e9e859d21e82e6982009cd14e5da683c16c8086a0f21fd9e0\",\"license\":\"MIT\"},\"contracts/DestinationUtility/CyberDestinationUtilityFactoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n//\\nimport '../CyberDropBase.sol';\\n\\ncontract CyberDestinationUtilityFactoryFacet is CyberDropBase {}\\n\",\"keccak256\":\"0xea7d374586c6b364a3331788fb93171edfa2cb7df06ad82192e54a22b0b48cb8\",\"license\":\"MIT\"},\"contracts/Diamond/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n  bytes32 public constant DIAMOND_STORAGE_POSITION =\\n    keccak256('diamond.standard.diamond.storage');\\n\\n  struct FacetAddressAndPosition {\\n    address facetAddress;\\n    uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n  }\\n\\n  struct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n  }\\n\\n  struct DiamondStorage {\\n    // maps function selector to the facet address and\\n    // the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    // maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    // facet addresses\\n    address[] facetAddresses;\\n    // Used to query if a contract implements an interface.\\n    // Used to implement ERC-165.\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    // owner of the contract\\n    address contractOwner;\\n  }\\n\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x781cc8c5b1178471e307e8457f38b5b07926573a0c97c2debf4e567bd99e8981\",\"license\":\"MIT\"},\"contracts/ERC1155URI/ERC1155URI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '@solidstate/contracts/token/ERC1155/ERC1155.sol';\\nimport './ERC1155URIStorage.sol';\\n\\nabstract contract ERC1155URI is ERC1155 {\\n  function uri(uint256 _tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (string memory)\\n  {\\n    string memory tokenURI = ERC1155URIStorage.layout().tokenURIs[_tokenId];\\n    require(bytes(tokenURI).length != 0, 'ERC1155URI: tokenId not exist');\\n    return string(abi.encodePacked(ERC1155URIStorage.layout().uri, tokenURI));\\n  }\\n\\n  function setURI(string memory newUri) internal virtual {\\n    ERC1155URIStorage.layout().uri = newUri;\\n  }\\n\\n  function setTokenURI(uint256 tokenId, string memory _tokenURI)\\n    internal\\n    virtual\\n  {\\n    ERC1155URIStorage.layout().tokenURIs[tokenId] = _tokenURI;\\n  }\\n}\\n\",\"keccak256\":\"0x9969aae76533211524fea616fb7d92694264e6fbae130e727f71989da0ce2846\",\"license\":\"MIT\"},\"contracts/ERC1155URI/ERC1155URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary ERC1155URIStorage {\\n  bytes32 internal constant STORAGESLOT =\\n    keccak256('diamond.storage.ERC1155URI');\\n\\n  struct Layout {\\n    mapping(uint256 => string) tokenURIs;\\n    string uri;\\n  }\\n\\n  function layout() internal pure returns (Layout storage layout) {\\n    bytes32 slot = STORAGESLOT;\\n    assembly {\\n      layout.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1dd1df65c74333a49a3aae6ae183cbea1eb75be9cd66fc6caba4cbf474b6603e\",\"license\":\"MIT\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\n\\n//\\n\\nlibrary LibAppStorage {\\n  bytes32 public constant STORAGE_SLOT = keccak256('app.storage');\\n\\n  struct Layout {\\n    address manager;\\n    address opensea;\\n    Counters.Counter totalSupply;\\n    mapping(address => Counters.Counter) minterNonce;\\n    address oncyber;\\n  }\\n\\n  function layout() internal pure returns (Layout storage layout) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly {\\n      layout.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xd506e960590d37732ec1dc1a095e598ccb6531515f4b6e71fed8deacb349b14b\",\"license\":\"MIT\"},\"contracts/libraries/LibDropStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n//\\n\\nlibrary LibDropStorage {\\n  bytes32 public constant STORAGE_SLOT = keccak256('drop.app.storage');\\n  struct Drop {\\n    uint256 timeStart;\\n    uint256 timeEnd;\\n    uint256 priceStart;\\n    uint256 priceEnd;\\n    uint256 stepDuration;\\n    uint256 amountCap;\\n    uint256 shareCyber;\\n    address payable creator;\\n    uint256 minted;\\n  }\\n\\n  struct Layout {\\n    mapping(uint256 => Drop) drops;\\n  }\\n\\n  function layout() internal pure returns (Layout storage layout) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly {\\n      layout.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x62c87ae624a2956c9b651be62e64868d7117e93c82423046fc1e1594dad76d63\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accountsByToken(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "list of holder addresses"
        }
      },
      "balanceOf(address,uint256)": {
        "params": {
          "account": "address to query",
          "id": "token to query"
        },
        "returns": {
          "_0": "token balance"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "accounts": "addresss to query",
          "ids": "tokens to query"
        },
        "returns": {
          "_0": "token balances"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "amounts": "list of quantities of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "ids": "list of token IDs",
          "to": "receiver of tokens"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "amount": "quantity of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "id": "token ID",
          "to": "receiver of tokens"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address whose approval status to update",
          "status": "whether operator should be considered approved"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "tokensByAccount(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "list of token ids"
        }
      },
      "totalHolders(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "quantity of holders"
        }
      },
      "totalSupply(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "token supply"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accountsByToken(uint256)": {
        "notice": "query holders of given token"
      },
      "balanceOf(address,uint256)": {
        "notice": "query the balance of given token held by given address"
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "query the balances of given tokens held by given addresses"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given operator to spend held tokens"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "tokensByAccount(address)": {
        "notice": "query tokens held by given address"
      },
      "totalHolders(uint256)": {
        "notice": "query total number of holders for given token"
      },
      "totalSupply(uint256)": {
        "notice": "query total minted supply of given token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}